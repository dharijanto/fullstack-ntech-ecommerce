"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const path=require("path"),express=require("express"),Promise=require("bluebird"),app_config_1=require("./app-config");function addImageModel(t,e){e.Image=t.define("images",{id:{type:t.Sequelize.INTEGER,primaryKey:!0,autoIncrement:!0},filename:{type:t.Sequelize.STRING,unique:!0},url:{type:t.Sequelize.TEXT}})}exports.addImageModel=addImageModel;class AppController{constructor(t){this.interceptors=[],this.siteData=t,this.router=express(),this.viewPath=t.viewPath||path.join(__dirname,"views"),this.assetsPath=t.assetPath||path.join(this.viewPath,"/assets"),this.router.set("views",this.viewPath),this.router.set("view engine","pug"),this.router.use("/assets",express.static(this.assetsPath,{maxAge:app_config_1.default.PRODUCTION?"1h":"0"}))}initialize(){return Promise.resolve(null)}isUpToDate(){return Promise.resolve(!0)}getInitData(){return this.siteData}getDb(){return this.siteData.db}getSite(){return this.siteData.site}extendInterceptors(...t){return this.interceptors.concat(t)}addInterceptor(...t){this.interceptors=this.extendInterceptors(...t)}routeAll(t,...e){this.router.all(t,this.extendInterceptors(...e))}routeGet(t,...e){this.router.get(t,this.extendInterceptors(...e))}routePost(t,...e){this.router.post(t,this.extendInterceptors(...e))}routeUse(t,...e){this.router.use(t,this.extendInterceptors(...e))}evictRequireCache(){return Promise.resolve(null)}getRouter(){return this.router}}exports.AppController=AppController;class CMSController{constructor(t,e=!0){this.interceptors=[],this.siteData=t,this.siteHash=t.site.hash,this.router=express(),e?(this.subRouter=express(),this.router.use(`/${this.siteHash}`,this.subRouter)):this.subRouter=this.router,this.subRouter.locals.rootifyPath=this.rootifyPath.bind(this),this.subRouter.locals.basedir=t.baseDir,this.viewPath=t.viewPath,this.assetsPath=t.assetPath||path.join(this.viewPath,"/assets"),this.subRouter.use("/assets",express.static(this.assetsPath)),this.subRouter.set("views",this.viewPath),this.subRouter.set("view engine","pug")}rootifyPath(t){return this.siteHash?`/${this.siteHash}/${t}`:`/${t}`}extendInterceptors(...t){return this.interceptors.concat(t)}addInterceptor(...t){this.interceptors=this.extendInterceptors(...t)}routeAll(t,...e){this.subRouter.all(t,this.extendInterceptors(...e))}routeGet(t,...e){this.subRouter.get(t,this.extendInterceptors(...e))}routePost(t,...e){this.subRouter.post(t,this.extendInterceptors(...e))}routeUse(t,...e){this.subRouter.use(t,this.extendInterceptors(...e))}getRouter(){return this.router}}exports.CMSController=CMSController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zaXRlLWRlZmluaXRpb25zLnRzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiZXhwcmVzcyIsIlByb21pc2UiLCJhcHBfY29uZmlnXzEiLCJhZGRJbWFnZU1vZGVsIiwic2VxdWVsaXplIiwibW9kZWxzIiwiSW1hZ2UiLCJkZWZpbmUiLCJpZCIsInR5cGUiLCJTZXF1ZWxpemUiLCJJTlRFR0VSIiwicHJpbWFyeUtleSIsImF1dG9JbmNyZW1lbnQiLCJmaWxlbmFtZSIsIlNUUklORyIsInVuaXF1ZSIsInVybCIsIlRFWFQiLCJleHBvcnRzIiwiQXBwQ29udHJvbGxlciIsIltvYmplY3QgT2JqZWN0XSIsImRhdGEiLCJ0aGlzIiwiaW50ZXJjZXB0b3JzIiwic2l0ZURhdGEiLCJyb3V0ZXIiLCJ2aWV3UGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJhc3NldHNQYXRoIiwiYXNzZXRQYXRoIiwic2V0IiwidXNlIiwic3RhdGljIiwibWF4QWdlIiwiZGVmYXVsdCIsIlBST0RVQ1RJT04iLCJyZXNvbHZlIiwiZGIiLCJzaXRlIiwiZm5zIiwiY29uY2F0IiwiZXh0ZW5kSW50ZXJjZXB0b3JzIiwiYWxsIiwiZ2V0IiwicG9zdCIsIkNNU0NvbnRyb2xsZXIiLCJ1c2VTdWJyb3V0ZXIiLCJzaXRlSGFzaCIsImhhc2giLCJzdWJSb3V0ZXIiLCJsb2NhbHMiLCJyb290aWZ5UGF0aCIsImJpbmQiLCJiYXNlZGlyIiwiYmFzZURpciJdLCJtYXBwaW5ncyI6Im9FQUFBLE1BQUFBLEtBQUFDLFFBQUEsUUFFQUMsUUFBQUQsUUFBQSxXQUNBRSxRQUFBRixRQUFBLFlBSUFHLGFBQUFILFFBQUEsZ0JBaUNBLFNBQUFJLGNBQStCQyxFQUFzQkMsR0FDbkRBLEVBQU9DLE1BQVFGLEVBQVVHLE9BQU8sVUFDOUJDLElBQU1DLEtBQU1MLEVBQVVNLFVBQVVDLFFBQVNDLFlBQVksRUFBTUMsZUFBZSxHQUMxRUMsVUFBWUwsS0FBTUwsRUFBVU0sVUFBVUssT0FBUUMsUUFB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RUFBTXlCLEtBQUtvQixzQkFBc0JGLElBR3REcEIsVUFBV3ZCLEtBQWlCMkMsR0FDMUJsQixLQUFLNEIsVUFBVUwsS0FBS2hELEVBQU15QixLQUFLb0Isc0JBQXNCRixJQUd2RHBCLFNBQVV2QixLQUFpQjJDLEdBQ3pCbEIsS0FBSzRCLFVBQVVsQixJQUFJbkMsRUFBTXlCLEtBQUtvQixzQkFBc0JGLElBR3REcEIsWUFDRSxPQUFPRSxLQUFLRyxRQWpFaEJQLFFBQUE0QixjQUFBQSIsImZpbGUiOiJzaXRlLWRlZmluaXRpb25zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJ1xuXG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ2JsdWViaXJkJ1xuXG5pbXBvcnQgeyBTZXF1ZWxpemUsIE1vZGVscyB9IGZyb20gJ3NlcXVlbGl6ZSdcblxuaW1wb3J0IEFwcENvbmZpZyBmcm9tICcuL2FwcC1jb25maWcnXG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YWJhc2Uge1xuICBzZXF1ZWxpemU6IFNlcXVlbGl6ZVxuICBtb2RlbHM6IHt9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlciB7XG4gIGlkOiBudW1iZXIsXG4gIHVzZXJuYW1lOiBzdHJpbmcsXG4gIGVtYWlsOiBzdHJpbmcsXG4gIHNpdGVJZDogbnVtYmVyXG59XG5cbi8qIC0tLS0tLS0tLS0tLS0tLSBJbWFnZSBTZXJ2aWNlIC0tLS0tLS0tLS0tLS0tLSAqL1xuZXhwb3J0IHR5cGUgRmlsZU5hbWVGb3JtYXR0ZXIgPSAoZmlsZW5hbWU6IHN0cmluZykgPT4gc3RyaW5nXG5leHBvcnQgdHlwZSBVUkxGb3JtYXR0ZXIgPSAoZmlsZW5hbWU6IHN0cmluZykgPT4gc3RyaW5nXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlUmVzb3VyY2Uge1xuICB1cmw6IHN0cmluZyxcbiAgaWRlbnRpZmllcjogc3RyaW5nXG59XG5leHBvcnQgaW50ZXJmYWNlIEltYWdlU2VydmljZSB7XG4gIGdldEV4cHJlc3NVcGxvYWRNaWRkbGV3YXJlICh1cGxvYWRQYXRoOiBzdHJpbmcsIHVybEZvcm1hdHRlcjogVVJMRm9ybWF0dGVyLFxuICAgIGZpZWxkTmFtZT86IHN0cmluZywgZmlsZU5hbWVGb3JtYXR0ZXI/OiBGaWxlTmFtZUZvcm1hdHRlcik6IGV4cHJlc3MuUmVxdWVzdEhhbmRsZXJcbiAgZ2V0SW1hZ2VzICh1cmxGb3JtYXR0ZXI6IFVSTEZvcm1hdHRlcik6IFByb21pc2U8TkNSZXNwb25zZTxJbWFnZVJlc291cmNlPj5cbiAgZGVsZXRlSW1hZ2UgKHVwbG9hZFBhdGg6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZyk6IFByb21pc2U8TkNSZXNwb25zZTxudWxsPj5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbWFnZVNlcnZpY2VDb25zdHJ1Y3RhYmxlIHtcbiAgbmV3IChzZXF1ZWxpemU6IFNlcXVlbGl6ZSwgbW9kZWxzOiBNb2RlbHMpOiBJbWFnZVNlcnZpY2Vcbn1cblxuLy8gRGF0YWJhc2UgZm9ybWF0IG5lZWRlZCB0byB1c2UgSW1hZ2UgU2VydmljZVxuZXhwb3J0IGZ1bmN0aW9uIGFkZEltYWdlTW9kZWwgKHNlcXVlbGl6ZTogU2VxdWVsaXplLCBtb2RlbHM6IE1vZGVscykge1xuICBtb2RlbHMuSW1hZ2UgPSBzZXF1ZWxpemUuZGVmaW5lKCdpbWFnZXMnLCB7XG4gICAgaWQ6IHsgdHlwZTogc2VxdWVsaXplLlNlcXVlbGl6ZS5JTlRFR0VSLCBwcmltYXJ5S2V5OiB0cnVlLCBhdXRvSW5jcmVtZW50OiB0cnVlIH0sXG4gICAgZmlsZW5hbWU6IHsgdHlwZTogc2VxdWVsaXplLlNlcXVlbGl6ZS5TVFJJTkcsIHVuaXF1ZTogdHJ1ZSB9LFxuICAgIHVybDogeyB0eXBlOiBzZXF1ZWxpemUuU2VxdWVsaXplLlRFWFQgfVxuICB9KVxufVxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmljZXMge1xuICBJbWFnZVNlcnZpY2U6IEltYWdlU2VydmljZUNvbnN0cnVjdGFibGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaXRlIHtcbiAgaWQ6IG51bWJlcixcbiAgdGVtcGxhdGVJZDogc3RyaW5nLFxuICBuYW1lOiBzdHJpbmcsXG4gIGRiTmFtZTogc3RyaW5nLFxuICBoYXNoOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaXRlRGF0YSB7XG4gIHNpdGU6IFNpdGUsXG4gIHVzZXI6IFVzZXIsXG4gIHNvY2tldElPOiBTb2NrZXRJTyxcbiAgZGI6IERhdGFiYXNlLFxuICB2aWV3UGF0aDogc3RyaW5nLFxuICBiYXNlRGlyPzogc3RyaW5nLFxuICBhc3NldFBhdGg/OiBzdHJpbmcsXG4gIHNlcnZpY2VzOiBTZXJ2aWNlc1xufVxuXG5leHBvcnQgdHlwZSBTb2NrZXRJTyA9IGFueVxuXG5leHBvcnQgaW50ZXJmYWNlIERCU3RydWN0dXJlIHtcbiAgLy8gUmV0dXJuIG1vZGVsc1xuICBhZGRUYWJsZXMgKHNlcXVlbGl6ZTogU2VxdWVsaXplLCBtb2RlbHM6IHt9KToge31cbn1cblxuLyogLS0tLS0tLS0tLS0tLS0tIEFwcCBDb250cm9sbGVyIC0tLS0tLS0tLS0tLS0tLSAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFwcENvbnRyb2xsZXIge1xuICByZWFkb25seSByb3V0ZXI6IGV4cHJlc3MuRXhwcmVzc1xuICBwcm90ZWN0ZWQgdmlld1BhdGg6IHN0cmluZ1xuICBwcm90ZWN0ZWQgYXNzZXRzUGF0aDogc3RyaW5nXG4gIHByb3RlY3RlZCBzaXRlRGF0YTogU2l0ZURhdGFcbiAgcHJvdGVjdGVkIGludGVyY2VwdG9yczogZXhwcmVzcy5SZXF1ZXN0SGFuZGxlcltdID0gW11cblxuICBjb25zdHJ1Y3RvciAoZGF0YTogU2l0ZURhdGEpIHtcbiAgICB0aGlzLnNpdGVEYXRhID0gZGF0YVxuICAgIHRoaXMucm91dGVyID0gZXhwcmVzcygpXG4gICAgLy8gVE9ETzogX19kaXJuYW1lIGlzIG5vdCBuZWNlc3NhcnlcbiAgICB0aGlzLnZpZXdQYXRoID0gZGF0YS52aWV3UGF0aCB8fCBwYXRoLmpvaW4oX19kaXJuYW1lLCAndmlld3MnKVxuICAgIHRoaXMuYXNzZXRzUGF0aCA9IGRhdGEuYXNzZXRQYXRoIHx8IHBhdGguam9pbih0aGlzLnZpZXdQYXRoLCAnL2Fzc2V0cycpXG5cbiAgICB0aGlzLnJvdXRlci5zZXQoJ3ZpZXdzJywgdGhpcy52aWV3UGF0aClcbiAgICB0aGlzLnJvdXRlci5zZXQoJ3ZpZXcgZW5naW5lJywgJ3B1ZycpXG4gICAgdGhpcy5yb3V0ZXIudXNlKCcvYXNzZXRzJywgZXhwcmVzcy5zdGF0aWModGhpcy5hc3NldHNQYXRoLCB7IG1heEFnZTogQXBwQ29uZmlnLlBST0RVQ1RJT04gPyAnMWgnIDogJzAnIH0pKVxuICB9XG4gIC8vIEluaXRpYWxpemUgdGhlIGNsYXNzLiBUaGUgcmVhc29uIHRoaXMgY2FuJ3QgYmUgZG9uZSB1c2luZyBjb25zdHJ1Y3RvciBpcyBiZWNhdXNlXG4gIC8vIHdlIG1heSBoYXZlIHRvIHdhaXQgdW50aWwgdGhlIGluaXRpYWxpemF0aW9uIGlzIGNvbXBlbHRlIGJlZm9yZSBwcmVjZWVkaW5nXG4gIGluaXRpYWxpemUgKCk6IFByb21pc2U8bnVsbD4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbClcbiAgfVxuXG4gIC8vIFdoZXRoZXIgdGhlIGluc3RhbmNlIGlzIHN0aWxsIHZhbGlkIG9yIG5vdCAoaS5lLiB0aGVyZSBhcmUgdXBkYXRlZCBmaWxlcylcbiAgaXNVcFRvRGF0ZSAoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKVxuICB9XG5cbiAgZ2V0SW5pdERhdGEgKCk6IFNpdGVEYXRhIHtcbiAgICByZXR1cm4gdGhpcy5zaXRlRGF0YVxuICB9XG5cbiAgZ2V0RGIgKCk6IERhdGFiYXNlIHtcbiAgICByZXR1cm4gdGhpcy5zaXRlRGF0YS5kYlxuICB9XG5cbiAgZ2V0U2l0ZSAoKTogU2l0ZSB7XG4gICAgcmV0dXJuIHRoaXMuc2l0ZURhdGEuc2l0ZVxuICB9XG5cbiAgcHJvdGVjdGVkIGV4dGVuZEludGVyY2VwdG9ycyAoLi4uZm5zOiBleHByZXNzLlJlcXVlc3RIYW5kbGVyW10pIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcmNlcHRvcnMuY29uY2F0KGZucylcbiAgfVxuXG4gIHByb3RlY3RlZCBhZGRJbnRlcmNlcHRvciAoLi4uZm5zOiBleHByZXNzLlJlcXVlc3RIYW5kbGVyW10pIHtcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHRoaXMuZXh0ZW5kSW50ZXJjZXB0b3JzKC4uLmZucylcbiAgfVxuXG4gIHJvdXRlQWxsIChwYXRoLCAuLi5mbnM6IGV4cHJlc3MuUmVxdWVzdEhhbmRsZXJbXSkge1xuICAgIHRoaXMucm91dGVyLmFsbChwYXRoLCB0aGlzLmV4dGVuZEludGVyY2VwdG9ycyguLi5mbnMpKVxuICB9XG5cbiAgcm91dGVHZXQgKHBhdGgsIC4uLmZuczogQXJyYXk8ZXhwcmVzcy5SZXF1ZXN0SGFuZGxlcj4pIHtcbiAgICB0aGlzLnJvdXRlci5nZXQocGF0aCwgdGhpcy5leHRlbmRJbnRlcmNlcHRvcnMoLi4uZm5zKSlcbiAgfVxuXG4gIHJvdXRlUG9zdCAocGF0aCwgLi4uZm5zOiBBcnJheTxleHByZXNzLlJlcXVlc3RIYW5kbGVyPikge1xuICAgIHRoaXMucm91dGVyLnBvc3QocGF0aCwgdGhpcy5leHRlbmRJbnRlcmNlcHRvcnMoLi4uZm5zKSlcbiAgfVxuXG4gIHJvdXRlVXNlIChwYXRoLCAuLi5mbnM6IEFycmF5PGV4cHJlc3MuUmVxdWVzdEhhbmRsZXI+KSB7XG4gICAgdGhpcy5yb3V0ZXIudXNlKHBhdGgsIHRoaXMuZXh0ZW5kSW50ZXJjZXB0b3JzKC4uLmZucykpXG4gIH1cblxuICAvLyBXaGVuIHRoZSBpbnN0YW5jZSBvZiB0aGUgY2xhc3MgaXMgbm8gbG9uZ2VyIHZhbGlkLFxuICAvLyB3ZSBoYXZlIHRvIGV2aWN0IG91dCB0aGUgY2FjaGUgc28gcmUtaW5zdGFudGlhdGlvbiBpcyBjbGVhblxuICBldmljdFJlcXVpcmVDYWNoZSAoKTogUHJvbWlzZTxudWxsPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKVxuICB9XG5cbiAgZ2V0Um91dGVyICgpOiBleHByZXNzLkV4cHJlc3Mge1xuICAgIHJldHVybiB0aGlzLnJvdXRlclxuICB9XG59XG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbi8qIC0tLS0tLS0tLS0tLS0tLSBDTVMgQ29udHJvbGxlciAtLS0tLS0tLS0tLS0tLS0gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDTVNDb250cm9sbGVyIHtcbiAgcmVhZG9ubHkgc2l0ZUhhc2g6IHN0cmluZ1xuICByZWFkb25seSByb3V0ZXI6IGV4cHJlc3MuRXhwcmVzc1xuICByZWFkb25seSBzdWJSb3V0ZXI6IGV4cHJlc3MuRXhwcmVzc1xuICBwcm90ZWN0ZWQgdmlld1BhdGg6IHN0cmluZ1xuICBwcm90ZWN0ZWQgYXNzZXRzUGF0aDogc3RyaW5nXG4gIHByb3RlY3RlZCBpbnRlcmNlcHRvcnM6IEFycmF5PGFueT4gPSBbXVxuICByZWFkb25seSBzaXRlRGF0YTogU2l0ZURhdGFcblxuICBjb25zdHJ1Y3RvciAoc2l0ZURhdGE6IFNpdGVEYXRhLCB1c2VTdWJyb3V0ZXIgPSB0cnVlKSB7XG4gICAgdGhpcy5zaXRlRGF0YSA9IHNpdGVEYXRhXG4gICAgdGhpcy5zaXRlSGFzaCA9IHNpdGVEYXRhLnNpdGUuaGFzaFxuICAgIC8vIFNpbmNlIHRoZSBwYXRoIGlzIHByZWZpeGVkIHdpdGggLzpoYXNoLywgd2UgZG9uJ3Qgd2FubmEgaGFuZGxlIGl0IG1hbnVhbGx5IGV2ZXJ5dGltZSwgaGVuY2Ugd2UgdXNlIHR3byByb3V0ZXJzXG4gICAgdGhpcy5yb3V0ZXIgPSBleHByZXNzKClcbiAgICBpZiAodXNlU3Vicm91dGVyKSB7XG4gICAgICB0aGlzLnN1YlJvdXRlciA9IGV4cHJlc3MoKVxuICAgICAgdGhpcy5yb3V0ZXIudXNlKGAvJHt0aGlzLnNpdGVIYXNofWAsIHRoaXMuc3ViUm91dGVyKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN1YlJvdXRlciA9IHRoaXMucm91dGVyXG4gICAgfVxuICAgIHRoaXMuc3ViUm91dGVyLmxvY2Fscy5yb290aWZ5UGF0aCA9IHRoaXMucm9vdGlmeVBhdGguYmluZCh0aGlzKVxuICAgIC8vIFVzZWQgZm9yIHB1ZyBwYXRoIHRoYXQgc3RhcnRzIHdpdGggL1xuICAgIHRoaXMuc3ViUm91dGVyLmxvY2Fscy5iYXNlZGlyID0gc2l0ZURhdGEuYmFzZURpclxuICAgIHRoaXMudmlld1BhdGggPSBzaXRlRGF0YS52aWV3UGF0aFxuICAgIHRoaXMuYXNzZXRzUGF0aCA9IHNpdGVEYXRhLmFzc2V0UGF0aCB8fCBwYXRoLmpvaW4odGhpcy52aWV3UGF0aCwgJy9hc3NldHMnKVxuICAgIHRoaXMuc3ViUm91dGVyLnVzZSgnL2Fzc2V0cycsIGV4cHJlc3Muc3RhdGljKHRoaXMuYXNzZXRzUGF0aCkpXG4gICAgdGhpcy5zdWJSb3V0ZXIuc2V0KCd2aWV3cycsIHRoaXMudmlld1BhdGgpXG4gICAgdGhpcy5zdWJSb3V0ZXIuc2V0KCd2aWV3IGVuZ2luZScsICdwdWcnKVxuICB9XG5cbiAgLy8gU2luY2Ugd2UncmUgdXNpbmcgLzpoYXNoL3BhdGgsIHdlIGhhdmUgdG8gcHJlcGVuZCA6aGFzaFxuICAvLyBhcyB0aGUgcm9vdCBvZiB0aGUgcGF0aCwgd2hlbiByZWZlcnJpbmcgdG8gYW4gYXNzZXRcbiAgcHJvdGVjdGVkIHJvb3RpZnlQYXRoIChmaWxlbmFtZSkge1xuICAgIGlmICh0aGlzLnNpdGVIYXNoKSB7XG4gICAgICByZXR1cm4gYC8ke3RoaXMuc2l0ZUhhc2h9LyR7ZmlsZW5hbWV9YFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYC8ke2ZpbGVuYW1lfWBcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZXh0ZW5kSW50ZXJjZXB0b3JzICguLi5mbnM6IGV4cHJlc3MuUmVxdWVzdEhhbmRsZXJbXSkge1xuICAgIHJldHVybiB0aGlzLmludGVyY2VwdG9ycy5jb25jYXQoZm5zKVxuICB9XG5cbiAgcHJvdGVjdGVkIGFkZEludGVyY2VwdG9yICguLi5mbnM6IGV4cHJlc3MuUmVxdWVzdEhhbmRsZXJbXSkge1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0gdGhpcy5leHRlbmRJbnRlcmNlcHRvcnMoLi4uZm5zKVxuICB9XG5cbiAgcm91dGVBbGwgKHBhdGg6IHN0cmluZywgLi4uZm5zOiBleHByZXNzLlJlcXVlc3RIYW5kbGVyW10pIHtcbiAgICB0aGlzLnN1YlJvdXRlci5hbGwocGF0aCwgdGhpcy5leHRlbmRJbnRlcmNlcHRvcnMoLi4uZm5zKSlcbiAgfVxuXG4gIHJvdXRlR2V0IChwYXRoOiBzdHJpbmcsIC4uLmZuczogQXJyYXk8ZXhwcmVzcy5SZXF1ZXN0SGFuZGxlcj4pIHtcbiAgICB0aGlzLnN1YlJvdXRlci5nZXQocGF0aCwgdGhpcy5leHRlbmRJbnRlcmNlcHRvcnMoLi4uZm5zKSlcbiAgfVxuXG4gIHJvdXRlUG9zdCAocGF0aDogc3RyaW5nLCAuLi5mbnM6IEFycmF5PGV4cHJlc3MuUmVxdWVzdEhhbmRsZXI+KSB7XG4gICAgdGhpcy5zdWJSb3V0ZXIucG9zdChwYXRoLCB0aGlzLmV4dGVuZEludGVyY2VwdG9ycyguLi5mbnMpKVxuICB9XG5cbiAgcm91dGVVc2UgKHBhdGg6IHN0cmluZywgLi4uZm5zOiBBcnJheTxleHByZXNzLlJlcXVlc3RIYW5kbGVyPikge1xuICAgIHRoaXMuc3ViUm91dGVyLnVzZShwYXRoLCB0aGlzLmV4dGVuZEludGVyY2VwdG9ycyguLi5mbnMpKVxuICB9XG5cbiAgZ2V0Um91dGVyICgpOiBleHByZXNzLkV4cHJlc3Mge1xuICAgIHJldHVybiB0aGlzLnJvdXRlclxuICB9XG5cbiAgYWJzdHJhY3QgZ2V0U2lkZWJhciAoKTogYW55W11cbn1cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbiJdfQ==
