"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const path=require("path"),express=require("express");class AppController{constructor(t){this.interceptors=[],this.siteData=t,this.router=express(),this.viewPath=t.viewPath||path.join(__dirname,"views"),this.assetsPath=t.assetPath||path.join(this.viewPath,"/assets"),this.router.set("views",this.viewPath),this.router.set("view engine","pug"),this.router.use("/assets",express.static(this.assetsPath,{maxAge:"1h"}))}initialize(){return Promise.resolve(null)}isUpToDate(){return Promise.resolve(!0)}getInitData(){return this.siteData}getDb(){return this.siteData.db}getSite(){return this.siteData.site}extendInterceptors(...t){return this.interceptors.concat(t)}addInterceptor(...t){this.interceptors=this.extendInterceptors(...t)}routeAll(t,...e){this.router.all(t,this.extendInterceptors(...e))}routeGet(t,...e){this.router.get(t,this.extendInterceptors(...e))}routePost(t,...e){this.router.post(t,this.extendInterceptors(...e))}routeUse(...t){this.router.use("",this.extendInterceptors(...t))}evictRequireCache(){return Promise.resolve(null)}getRouter(){return this.router}}exports.AppController=AppController;class CMSController{constructor(t){this.interceptors=[],this.siteData=t,this.siteHash=t.site.hash,this.router=express(),this.subRouter=express(),this.router.use(`/${this.siteHash}`,this.subRouter),this.subRouter.locals.rootifyPath=this.rootifyPath.bind(this),this.viewPath=t.viewPath,this.assetsPath=t.assetPath||path.join(this.viewPath,"/assets"),this.subRouter.use("/assets",express.static(this.assetsPath)),this.subRouter.set("views",this.viewPath),this.subRouter.set("view engine","pug")}rootifyPath(t){return this.siteHash?`/${this.siteHash}/${t}`:`/${t}`}extendInterceptors(...t){return this.interceptors.concat(t)}addInterceptor(...t){this.interceptors=this.extendInterceptors(...t)}routeAll(t,...e){this.subRouter.all(t,this.extendInterceptors(...e))}routeGet(t,...e){this.subRouter.get(t,this.extendInterceptors(...e))}routePost(t,...e){this.subRouter.post(t,this.extendInterceptors(...e))}routeUse(t,...e){this.subRouter.use(t,this.extendInterceptors(...e))}getRouter(){return this.router}}exports.CMSController=CMSController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
