"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),Utils=require("../libs/utils"),crud_service_1=require("./crud-service"),local_shop_service_1=require("./local-shop-service"),product_service_1=require("./product-service"),formatter_1=require("../libs/formatter");class CartService extends crud_service_1.CRUDService{addItemToCart(e,r,t){let a;const s=(a=r||{readyStock:[],preOrder:[]})[e].find(e=>e.variantId===t.variantId),i=s?s.quantity+t.quantity:t.quantity;return local_shop_service_1.default.getVariantAvailability(t.variantId).then(r=>{if(r.status&&r.data){const t=r.data.quantity||0;return"readyStock"===r.data.status?"preOrder"===e?{status:!1,errMessage:"Product is ready stock!"}:i>t?{status:!1,errMessage:`Only ${t} items left!`}:{status:!0}:"preOrder"===r.data.status?"readyStock"===e?{status:!1,errMessage:"Product is not ready stock!"}:{status:!0}:{status:!1,errMessage:"Product is not available!"}}return{status:!1,errMessage:r.errMessage}}).then(r=>r.status?(s?(s.quantity=i,s.quantity<=0&&(a[e]=a[e].filter(e=>e.variantId!==s.variantId))):a[e].push(t),this.getCart(a)):r)}getCartItemDetail(e){return Promise.join(product_service_1.default.getVariantImage(e.variantId),local_shop_service_1.default.getVariantInformation(e.variantId)).spread((r,t)=>{if(t.status&&t.data)return{variantId:e.variantId,quantity:e.quantity,product:t.data.product,variant:t.data.variant,image:r.data&&Utils.getImageURL(r.data.imageFilename)};throw new Error("variantId="+e.variantId+" is not found!")})}createOrderDetail(e,r,t,a){return local_shop_service_1.default.getVariantPrice(r).then(s=>{if(s.status&&s.data)return super.create("OrderDetail",{orderId:e,status:a,variantId:r,quantity:t,price:s.data});throw new Error(`variantId=${r} is not found!`)})}placeOrder(e,r,t,a){if(void 0===a||0===a.preOrder.length&&0===a.readyStock.length)return Promise.resolve({status:!1,errMessage:"Cart is empty!"});if(e){const s=local_shop_service_1.default.getLocalShopId();return a.preOrder.length>0&&!formatter_1.default.validatePhoneNumber(r)?Promise.resolve({status:!1,errMessage:"Correct phone number is required for PO order!"}):super.create("Order",{fullName:e,phoneNumber:r,notes:t,shopId:s,status:"Open"}).then(e=>{if(e.status&&e.data){const r=e.data.id;return Promise.join(Promise.map(a.preOrder,e=>this.createOrderDetail(r,e.variantId,e.quantity,"PO")),Promise.map(a.readyStock,e=>this.createOrderDetail(r,e.variantId,e.quantity,"Ready"))).spread((e,r)=>{return e.concat(r).reduce((e,r)=>({status:e.status&&r.status,errMessage:e.errMessage||r.errMessage}),{status:!0,errMessage:""})})}return console.log("here"),Promise.resolve({status:!1,errMessage:e.errMessage})})}return Promise.resolve({status:!1,errMessage:"fullName is required!"})}emptyCart(e){return e?(e.preOrder=[],e.readyStock=[],Promise.resolve({status:!0})):Promise.resolve({status:!1,errMessage:"currentCart is not defined!"})}getCart(e){return e?Promise.join(Promise.map(e.readyStock||[],e=>this.getCartItemDetail(e)),Promise.map(e.preOrder||[],e=>this.getCartItemDetail(e))).spread((e,r)=>{const t=e.concat(r).reduce((e,r)=>e+r.product.shopPrice*r.quantity,0);return{status:!0,data:{preOrder:r,readyStock:e,totalPrice:t}}}):Promise.resolve({status:!0,data:{readyStock:[],preOrder:[],totalPrice:0}})}}exports.default=new CartService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2aWNlcy9jYXJ0LXNlcnZpY2UudHMiXSwibmFtZXMiOlsiUHJvbWlzZSIsInJlcXVpcmUiLCJVdGlscyIsImNydWRfc2VydmljZV8xIiwibG9jYWxfc2hvcF9zZXJ2aWNlXzEiLCJwcm9kdWN0X3NlcnZpY2VfMSIsImZvcm1hdHRlcl8xIiwiQ2FydFNlcnZpY2UiLCJDUlVEU2VydmljZSIsIltvYmplY3QgT2JqZWN0XSIsInR5cGUiLCJjdXJyZW50Q2FydCIsIml0ZW0iLCJjYXJ0IiwiZXhpc3RpbmdJdGVtIiwicmVhZHlTdG9jayIsInByZU9yZGVyIiwiZmluZCIsImN1cnJlbnRJdGVtIiwidmFyaWFudElkIiwicmVxdWVzdGVkUXVhbnRpdHkiLCJxdWFudGl0eSIsImRlZmF1bHQiLCJnZXRWYXJpYW50QXZhaWxhYmlsaXR5IiwidGhlbiIsInJlc3AiLCJzdGF0dXMiLCJkYXRhIiwiYXZhaWxhYmxlUXVhbnRpdHkiLCJlcnJNZXNzYWdlIiwiZmlsdGVyIiwicHVzaCIsInRoaXMiLCJnZXRDYXJ0Iiwiam9pbiIsImdldFZhcmlhbnRJbWFnZSIsImdldFZhcmlhbnRJbmZvcm1hdGlvbiIsInNwcmVhZCIsInJlc3AyIiwicHJvZHVjdCIsInZhcmlhbnQiLCJpbWFnZSIsImdldEltYWdlVVJMIiwiaW1hZ2VGaWxlbmFtZSIsIkVycm9yIiwib3JkZXJJZCIsIml0ZW1TdGF0dXMiLCJnZXRWYXJpYW50UHJpY2UiLCJzdXBlciIsImNyZWF0ZSIsInByaWNlIiwiZnVsbE5hbWUiLCJwaG9uZU51bWJlciIsIm5vdGVzIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwicmVzb2x2ZSIsImxvY2FsU2hvcElkIiwiZ2V0TG9jYWxTaG9wSWQiLCJ2YWxpZGF0ZVBob25lTnVtYmVyIiwic2hvcElkIiwiaWQiLCJtYXAiLCJjYXJ0SXRlbSIsImNyZWF0ZU9yZGVyRGV0YWlsIiwicG9SZXN1bHRzIiwicmVhZHlSZXN1bHRzIiwiY29uY2F0IiwicmVkdWNlIiwiYWNjIiwicmVzdWx0IiwiY29uc29sZSIsImxvZyIsImdldENhcnRJdGVtRGV0YWlsIiwidG90YWxQcmljZSIsInNob3BQcmljZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJvRUFDQSxNQUFBQSxRQUFBQyxRQUFBLFlBRUFDLE1BQUFELFFBQUEsaUJBQ0FFLGVBQUFGLFFBQUEsa0JBQ0FHLHFCQUFBSCxRQUFBLHdCQUNBSSxrQkFBQUosUUFBQSxxQkFFQUssWUFBQUwsUUFBQSwyQkErQkFNLG9CQUEwQkosZUFBQUssWUFDeEJDLGNBQWVDLEVBQWlDQyxFQUEyQkMsR0FDekUsSUFBSUMsRUFNSixNQUFNQyxHQUpKRCxFQURFRixJQUdPSSxjQUFnQkMsY0FFeUJOLEdBQU1PLEtBQUtDLEdBQ3REQSxFQUFZQyxZQUFjUCxFQUFLTyxXQUVsQ0MsRUFBb0JOLEVBQWVBLEVBQWFPLFNBQVdULEVBQUtTLFNBQVdULEVBQUtTLFNBQ3RGLE9BQU9qQixxQkFBQWtCLFFBQWlCQyx1QkFBdUJYLEVBQUtPLFdBQVdLLEtBQUtDLElBQ2xFLEdBQUlBLEVBQUtDLFFBQVVELEVBQUtFLEtBQU0sQ0FDNUIsTUFBTUMsRUFBb0JILEVBQUtFLEtBQUtOLFVBQVksRUFDaEQsTUFBeUIsZUFBckJJLEVBQUtFLEtBQUtELE9BQ0MsYUFBVGhCLEdBQ09nQixRQUFRLEVBQU9HLFdBQVksMkJBRWhDVCxFQUFvQlEsR0FDYkYsUUFBUSxFQUFPRyxtQkFBb0JELGtCQUVuQ0YsUUFBUSxHQUdTLGFBQXJCRCxFQUFLRSxLQUFLRCxPQUNOLGVBQVRoQixHQUNPZ0IsUUFBUSxFQUFPRyxXQUFZLGdDQUUzQkgsUUFBUSxJQUdWQSxRQUFRLEVBQU9HLFdBQVksNkJBR3RDLE9BQVNILFFBQVEsRUFBT0csV0FBWUosRUFBS0ksY0FFMUNMLEtBQUtDLEdBQ0ZBLEVBQUtDLFFBQ0haLEdBQ0ZBLEVBQWFPLFNBQVdELEVBRXBCTixFQUFhTyxVQUFZLElBQzNCUixFQUFLSCxHQUFRRyxFQUFLSCxHQUFNb0IsT0FBT1osR0FDdEJBLEVBQVlDLFlBQWNMLEVB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a0JBQWtCN0QsSUFFaENaLFFBQVE4RCxJQUFJbkQsRUFBWUssYUFBZ0JKLEdBQy9Cb0IsS0FBS3lDLGtCQUFrQjdELEtBRWhDeUIsT0FBTyxDQUFDdEIsRUFBd0JDLEtBQ2hDLE1BQU0wRCxFQUFhM0QsRUFBV29ELE9BQU9uRCxHQUFVb0QsT0FBTyxDQUFDQyxFQUFLekQsSUFDbkR5RCxFQUFNekQsRUFBSzJCLFFBQVFvQyxVQUFZL0QsRUFBS1MsU0FDMUMsR0FDSCxPQUNFSyxRQUFRLEVBQ1JDLE1BQ0VYLFNBQUFBLEVBQ0FELFdBQUFBLEVBQ0EyRCxXQUFBQSxNQXpCQzFFLFFBQVF3RCxTQUNiOUIsUUFBUSxFQUNSQyxNQUNFWixjQUNBQyxZQUNBMEQsV0FBWSxNQTRCdEJFLFFBQUF0RCxRQUFlLElBQUlmIiwiZmlsZSI6InNlcnZpY2VzL2NhcnQtc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZGVsIH0gZnJvbSAnc2VxdWVsaXplJ1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcblxuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi4vbGlicy91dGlscydcbmltcG9ydCB7IENSVURTZXJ2aWNlIH0gZnJvbSAnLi9jcnVkLXNlcnZpY2UnXG5pbXBvcnQgTG9jYWxTaG9wU2VydmljZSBmcm9tICcuL2xvY2FsLXNob3Atc2VydmljZSdcbmltcG9ydCBQcm9kdWN0U2VydmljZSBmcm9tICcuL3Byb2R1Y3Qtc2VydmljZSc7XG5pbXBvcnQgT3JkZXJNYW5hZ2VtZW50Q29udHJvbGxlciBmcm9tICcuLi9jbXMvY29udHJvbGxlcnMvb3JkZXItbWFuYWdlbWVudC1jb250cm9sbGVyJztcbmltcG9ydCBGb3JtYXR0ZXIgZnJvbSAnLi4vbGlicy9mb3JtYXR0ZXInO1xuXG5pbnRlcmZhY2UgQ2FydEl0ZW1NZXRhIHtcbiAgdmFyaWFudElkOiBudW1iZXJcbiAgcXVhbnRpdHk6IG51bWJlclxufVxuXG5pbnRlcmZhY2UgQ2FydE1ldGFEYXRhIHtcbiAgcmVhZHlTdG9jazogQXJyYXk8Q2FydEl0ZW1NZXRhPlxuICBwcmVPcmRlcjogQXJyYXk8Q2FydEl0ZW1NZXRhPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhcnRJdGVtIHtcbiAgdmFyaWFudElkOiBudW1iZXJcbiAgcXVhbnRpdHk6IG51bWJlclxuICBpbWFnZTogc3RyaW5nXG4gIHByb2R1Y3Q6IFNob3BpZmllZFByb2R1Y3RcbiAgdmFyaWFudDogU2hvcGlmaWVkVmFyaWFudFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhcnQge1xuICByZWFkeVN0b2NrOiBBcnJheTxDYXJ0SXRlbT5cbiAgcHJlT3JkZXI6IEFycmF5PENhcnRJdGVtPlxuICB0b3RhbFByaWNlOiBudW1iZXJcbn1cblxuLypcbkNhcnQgaXMgbm90IGFjdHVhbGx5IHN0b3JlZCBpbiBkYXRhYmFzZSwgaXQncyBzdG9yZWQgaW4gdGhlIHNlc3Npb24uXG5GdW5jdGlvbnMgaW4gdGhpcyBzZXJ2aWNlIHJlcXVpcmVzIGN1cnJlbnRDYXJ0LCB3aGljaCBpcyBjYXJ0IGluZm9ybWF0aW9uIHN0b3JlZFxub24gdGhlIHNlc3Npb24uXG4gKi9cbmNsYXNzIENhcnRTZXJ2aWNlIGV4dGVuZHMgQ1JVRFNlcnZpY2Uge1xuICBhZGRJdGVtVG9DYXJ0ICh0eXBlOiAncmVhZHlTdG9jaycgfCAncHJlT3JkZXInLCBjdXJyZW50Q2FydDogQ2FydE1ldGFEYXRhLCBpdGVtOiBDYXJ0SXRlbU1ldGEpOiBQcm9taXNlPE5DUmVzcG9uc2U8Q2FydE1ldGFEYXRhPj4ge1xuICAgIGxldCBjYXJ0OiBDYXJ0TWV0YURhdGFcbiAgICBpZiAoY3VycmVudENhcnQpIHtcbiAgICAgIGNhcnQgPSBjdXJyZW50Q2FydFxuICAgIH0gZWxzZSB7XG4gICAgICBjYXJ0ID0geyByZWFkeVN0b2NrOiBbXSwgcHJlT3JkZXI6IFtdIH1cbiAgICB9XG4gICAgY29uc3QgZXhpc3RpbmdJdGVtOiBDYXJ0SXRlbU1ldGEgfCB1bmRlZmluZWQgPSBjYXJ0W3R5cGVdLmZpbmQoY3VycmVudEl0ZW0gPT4ge1xuICAgICAgcmV0dXJuIGN1cnJlbnRJdGVtLnZhcmlhbnRJZCA9PT0gaXRlbS52YXJpYW50SWRcbiAgICB9KVxuICAgIGNvbnN0IHJlcXVlc3RlZFF1YW50aXR5ID0gZXhpc3RpbmdJdGVtID8gZXhpc3RpbmdJdGVtLnF1YW50aXR5ICsgaXRlbS5xdWFudGl0eSA6IGl0ZW0ucXVhbnRpdHlcbiAgICByZXR1cm4gTG9jYWxTaG9wU2VydmljZS5nZXRWYXJpYW50QXZhaWxhYmlsaXR5KGl0ZW0udmFyaWFudElkKS50aGVuKHJlc3AgPT4ge1xuICAgICAgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSkge1xuICAgICAgICBjb25zdCBhdmFpbGFibGVRdWFudGl0eSA9IHJlc3AuZGF0YS5xdWFudGl0eSB8fCAwXG4gICAgICAgIGlmIChyZXNwLmRhdGEuc3RhdHVzID09PSAncmVhZHlTdG9jaycpIHtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ3ByZU9yZGVyJykge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogJ1Byb2R1Y3QgaXMgcmVhZHkgc3RvY2shJyB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0ZWRRdWFudGl0eSA+IGF2YWlsYWJsZVF1YW50aXR5KSB7XG4gICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogZmFsc2UsIGVyck1lc3NhZ2U6IGBPbmx5ICR7YXZhaWxhYmxlUXVhbnRpdHl9IGl0ZW1zIGxlZnQhYCB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXNwLmRhdGEuc3RhdHVzID09PSAncHJlT3JkZXInKSB7XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdyZWFkeVN0b2NrJykge1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogJ1Byb2R1Y3QgaXMgbm90IHJlYWR5IHN0b2NrIScgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAnUHJvZHVjdCBpcyBub3QgYXZhaWxhYmxlIScgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4geyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiByZXNwLmVyck1lc3NhZ2UgfVxuICAgICAgfVxuICAgIH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgaWYgKGV4aXN0aW5nSXRlbSkge1xuICAgICAgICAgIGV4aXN0aW5nSXRlbS5xdWFudGl0eSA9IHJlcXVlc3RlZFF1YW50aXR5XG4gICAgICAgICAgLy8gUmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIGNhcnRcbiAgICAgICAgICBpZiAoZXhpc3RpbmdJdGVtLnF1YW50aXR5IDw9IDApIHtcbiAgICAgICAgICAgIGNhcnRbdHlwZV0gPSBjYXJ0W3R5cGVdLmZpbHRlcihjdXJyZW50SXRlbSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBjdXJyZW50SXRlbS52YXJpYW50SWQgIT09IGV4aXN0aW5nSXRlbS52YXJpYW50SWRcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcnRbdHlwZV0ucHVzaChpdGVtKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldENhcnQoY2FydClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNwXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2FydEl0ZW1EZXRhaWwgKGl0ZW06IENhcnRJdGVtTWV0YSkge1xuICAgIHJldHVybiBQcm9taXNlLmpvaW48TkNSZXNwb25zZTxhbnk+PihcbiAgICAgIFByb2R1Y3RTZXJ2aWNlLmdldFZhcmlhbnRJbWFnZShpdGVtLnZhcmlhbnRJZCksXG4gICAgICBMb2NhbFNob3BTZXJ2aWNlLmdldFZhcmlhbnRJbmZvcm1hdGlvbihpdGVtLnZhcmlhbnRJZClcbiAgICApLnNwcmVhZCgocmVzcDI6IE5DUmVzcG9uc2U8UHJvZHVjdEltYWdlPiwgcmVzcDogTkNSZXNwb25zZTx7dmFyaWFudDogU2hvcGlmaWVkVmFyaWFudCwgcHJvZHVjdDogU2hvcGlmaWVkUHJvZHVjdH0+KSA9PiB7XG4gICAgICBpZiAocmVzcC5zdGF0dXMgJiYgcmVzcC5kYXRhKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdmFyaWFudElkOiBpdGVtLnZhcmlhbnRJZCxcbiAgICAgICAgICBxdWFudGl0eTogaXRlbS5xdWFudGl0eSxcbiAgICAgICAgICBwcm9kdWN0OiByZXNwLmRhdGEucHJvZHVjdCxcbiAgICAgICAgICB2YXJpYW50OiByZXNwLmRhdGEudmFyaWFudCxcbiAgICAgICAgICBpbWFnZTogcmVzcDIuZGF0YSAmJiBVdGlscy5nZXRJbWFnZVVSTChyZXNwMi5kYXRhLmltYWdlRmlsZW5hbWUpXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndmFyaWFudElkPScgKyBpdGVtLnZhcmlhbnRJZCArICcgaXMgbm90IGZvdW5kIScpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlT3JkZXJEZXRhaWwgKG9yZGVySWQ6IG51bWJlciwgdmFyaWFudElkOiBudW1iZXIsIHF1YW50aXR5OiBudW1iZXIsIGl0ZW1TdGF0dXM6ICdQTycgfCAnUmVhZHknKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPFBhcnRpYWw8T3JkZXJEZXRhaWw+Pj4ge1xuICAgIHJldHVybiBMb2NhbFNob3BTZXJ2aWNlLmdldFZhcmlhbnRQcmljZSh2YXJpYW50SWQpLnRoZW4ocmVzcDIgPT4ge1xuICAgICAgaWYgKHJlc3AyLnN0YXR1cyAmJiByZXNwMi5kYXRhKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5jcmVhdGU8T3JkZXJEZXRhaWw+KCdPcmRlckRldGFpbCcsIHtcbiAgICAgICAgICBvcmRlcklkLFxuICAgICAgICAgIHN0YXR1czogaXRlbVN0YXR1cyxcbiAgICAgICAgICB2YXJpYW50SWQ6IHZhcmlhbnRJZCxcbiAgICAgICAgICBxdWFudGl0eSxcbiAgICAgICAgICBwcmljZTogcmVzcDIuZGF0YVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB2YXJpYW50SWQ9JHt2YXJpYW50SWR9IGlzIG5vdCBmb3VuZCFgKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBwbGFjZU9yZGVyIChmdWxsTmFtZTogc3RyaW5nLCBwaG9uZU51bWJlcjogc3RyaW5nLCBub3Rlczogc3RyaW5nLCBjdXJyZW50Q2FydDogQ2FydE1ldGFEYXRhKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPGFueT4+IHtcbiAgICAvLyBUT0RPOiBVc2UgdHJhbnNhY3Rpb24gc28gd2UgY2FuIHJvbGxiYWNrXG4gICAgaWYgKGN1cnJlbnRDYXJ0ID09PSB1bmRlZmluZWQgfHwgKGN1cnJlbnRDYXJ0LnByZU9yZGVyLmxlbmd0aCA9PT0gMCAmJiBjdXJyZW50Q2FydC5yZWFkeVN0b2NrLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAnQ2FydCBpcyBlbXB0eSEnIH0pXG4gICAgfSBlbHNlIGlmICghZnVsbE5hbWUpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAnZnVsbE5hbWUgaXMgcmVxdWlyZWQhJyB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBsb2NhbFNob3BJZCA9IExvY2FsU2hvcFNlcnZpY2UuZ2V0TG9jYWxTaG9wSWQoKVxuICAgICAgaWYgKGN1cnJlbnRDYXJ0LnByZU9yZGVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKCFGb3JtYXR0ZXIudmFsaWRhdGVQaG9uZU51bWJlcihwaG9uZU51bWJlcikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogJ0NvcnJlY3QgcGhvbmUgbnVtYmVyIGlzIHJlcXVpcmVkIGZvciBQTyBvcmRlciEnIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdXBlci5jcmVhdGU8T3JkZXI+KCdPcmRlcicsIHtcbiAgICAgICAgZnVsbE5hbWUsXG4gICAgICAgIHBob25lTnVtYmVyLFxuICAgICAgICBub3RlcyxcbiAgICAgICAgc2hvcElkOiBsb2NhbFNob3BJZCxcbiAgICAgICAgc3RhdHVzOiAnT3BlbidcbiAgICAgIH0pLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgIGlmIChyZXNwLnN0YXR1cyAmJiByZXNwLmRhdGEpIHtcbiAgICAgICAgICBjb25zdCBvcmRlcklkID0gcmVzcC5kYXRhLmlkXG4gICAgICAgICAgcmV0dXJuIFByb21pc2Uuam9pbihcbiAgICAgICAgICAgIFByb21pc2UubWFwKGN1cnJlbnRDYXJ0LnByZU9yZGVyLCBjYXJ0SXRlbSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZU9yZGVyRGV0YWlsKG9yZGVySWQsIGNhcnRJdGVtLnZhcmlhbnRJZCwgY2FydEl0ZW0ucXVhbnRpdHksICdQTycpXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFByb21pc2UubWFwKGN1cnJlbnRDYXJ0LnJlYWR5U3RvY2ssIGNhcnRJdGVtID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlT3JkZXJEZXRhaWwob3JkZXJJZCwgY2FydEl0ZW0udmFyaWFudElkLCBjYXJ0SXRlbS5xdWFudGl0eSwgJ1JlYWR5JylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKS5zcHJlYWQoKHBvUmVzdWx0czogQXJyYXk8TkNSZXNwb25zZTxhbnk+PiwgcmVhZHlSZXN1bHRzOiBBcnJheTxOQ1Jlc3BvbnNlPGFueT4+KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBmaW5hbFJlc3VsdCA9IHBvUmVzdWx0cy5jb25jYXQocmVhZHlSZXN1bHRzKS5yZWR1Y2UoKGFjYywgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiB7IHN0YXR1czogYWNjLnN0YXR1cyAmJiByZXN1bHQuc3RhdHVzLCBlcnJNZXNzYWdlOiBhY2MuZXJyTWVzc2FnZSB8fCByZXN1bHQuZXJyTWVzc2FnZSB9XG4gICAgICAgICAgICB9LCB7IHN0YXR1czogdHJ1ZSwgZXJyTWVzc2FnZTogJycgfSlcbiAgICAgICAgICAgIHJldHVybiBmaW5hbFJlc3VsdFxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2hlcmUnKVxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiByZXNwLmVyck1lc3NhZ2UgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBlbXB0eUNhcnQgKGN1cnJlbnRDYXJ0OiBDYXJ0TWV0YURhdGEpIHtcbiAgICBpZiAoY3VycmVudENhcnQpIHtcbiAgICAgIGN1cnJlbnRDYXJ0LnByZU9yZGVyID0gW11cbiAgICAgIGN1cnJlbnRDYXJ0LnJlYWR5U3RvY2sgPSBbXVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHN0YXR1czogdHJ1ZSB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogJ2N1cnJlbnRDYXJ0IGlzIG5vdCBkZWZpbmVkIScgfSlcbiAgICB9XG4gIH1cblxuICBnZXRDYXJ0IChjdXJyZW50Q2FydDogQ2FydE1ldGFEYXRhKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPENhcnQ+PiB7XG4gICAgaWYgKCFjdXJyZW50Q2FydCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIHN0YXR1czogdHJ1ZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHJlYWR5U3RvY2s6IFtdLFxuICAgICAgICAgIHByZU9yZGVyOiBbXSxcbiAgICAgICAgICB0b3RhbFByaWNlOiAwXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLmpvaW4oXG4gICAgICAgIFByb21pc2UubWFwKGN1cnJlbnRDYXJ0LnJlYWR5U3RvY2sgfHwgW10sIGl0ZW0gPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldENhcnRJdGVtRGV0YWlsKGl0ZW0pXG4gICAgICAgIH0pLFxuICAgICAgICBQcm9taXNlLm1hcChjdXJyZW50Q2FydC5wcmVPcmRlciB8fCBbXSwgaXRlbSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FydEl0ZW1EZXRhaWwoaXRlbSlcbiAgICAgICAgfSlcbiAgICAgICkuc3ByZWFkKChyZWFkeVN0b2NrOiBBcnJheTxhbnk+LCBwcmVPcmRlcjogQXJyYXk8YW55PikgPT4ge1xuICAgICAgICBjb25zdCB0b3RhbFByaWNlID0gcmVhZHlTdG9jay5jb25jYXQocHJlT3JkZXIpLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGFjYyArIGl0ZW0ucHJvZHVjdC5zaG9wUHJpY2UgKiBpdGVtLnF1YW50aXR5XG4gICAgICAgIH0sIDApXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdHVzOiB0cnVlLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHByZU9yZGVyLFxuICAgICAgICAgICAgcmVhZHlTdG9jayxcbiAgICAgICAgICAgIHRvdGFsUHJpY2VcbiAgICAgICAgICB9IGFzIENhcnRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IENhcnRTZXJ2aWNlKClcbiJdfQ==
