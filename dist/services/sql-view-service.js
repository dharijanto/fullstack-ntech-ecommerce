"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const crud_service_1=require("./crud-service"),Promise=require("bluebird"),app_config_1=require("../app-config");let log=require("npmlog");const TAG="SQLViewService";class SQLViewService extends crud_service_1.CRUDService{createInStockOrdersView(){return super.getSequelize().query("\nCREATE VIEW inStockOrdersView AS\n(SELECT orders.shopId AS shopId,\n        # Only the quantity of 'Ready'-stock item is considered when calculating stockQuantity\n        SUM(IF(orderDetails.status = 'Ready', orderDetails.quantity, 0)) AS quantity,\n        variants.productId, variants.id as variantId\nFROM orders\nLEFT OUTER JOIN orderDetails ON orderDetails.orderId = orders.id AND orderDetails.deletedAt IS NULL\nLEFT OUTER JOIN variants ON variants.id = orderDetails.variantId AND variants.deletedAt IS NULL\nWHERE orders.status != 'Cancelled' AND orders.deletedAt IS NULL\nGROUP BY orders.shopId, variants.productId, variants.id)\n")}createShopifiedProductsView(){return log.info(TAG,"createShopifiedProductsView()"),super.getSequelize().query(`\nCREATE VIEW shopifiedProductsView AS\n(SELECT products.id, products.name as name, products.description as description,\n        products.warranty as warranty, products.price as defaultPrice,\n        subCategories.id as subCategoryId,\n        subCategories.name AS subCategoryName,\n        categories.id AS categoryId,\n        categories.name AS categoryName,\n        shops.id as shopId,\n        IFNULL(stockTable.stockQuantity, 0) - IFNULL(orderTable.quantity, 0) as stockQuantity,\n        IFNULL(supplierTable.supplierCount, 0) as supplierCount,\n        IFNULL(shopProducts.createdAt, products.createdAt) as createdAt,\n        IFNULL(shopProducts.updatedAt, products.updatedAt) as updatedAt,\n        IFNULL(shopProducts.price, products.price) as shopPrice,\n        IFNULL(shopProducts.preOrderAllowed,${app_config_1.default.DEFAULT_SHOP_PRODUCT_BEHAVIOR.preOrderAllowed?"TRUE":"FALSE"}) as preOrderAllowed,\n        IFNULL(shopProducts.preOrderDuration, ${app_config_1.default.DEFAULT_SHOP_PRODUCT_BEHAVIOR.preOrderDuration}) as preOrderDuration,\n        IFNULL(shopProducts.disabled, ${app_config_1.default.DEFAULT_SHOP_PRODUCT_BEHAVIOR.disabled}) as disabled\nFROM (SELECT * FROM products WHERE deletedAt IS NULL) AS products\n\nCROSS JOIN shops\n\nINNER JOIN subCategories ON subCategories.id = products.subCategoryId AND subCategories.deletedAt IS NULL\nINNER JOIN categories ON categories.id = subCategories.categoryId AND categories.deletedAt IS NULL\n\nLEFT OUTER JOIN\n  (SELECT variants.productId AS productId, SUM(shopStocks.quantity) stockQuantity, shopStocks.shopId as shopId\n   FROM variants INNER JOIN shopStocks ON variants.id = shopStocks.variantId\n   WHERE variants.deletedAt IS NULL AND shopStocks.deletedAt IS NULL\n   GROUP BY shopStocks.shopId, variants.productId) AS stockTable\nON products.id = stockTable.productId AND shops.id = stockTable.shopId\n\nLEFT OUTER JOIN\n  (SELECT inStockOrdersView.shopId AS shopId,\n          inStockOrdersView.productId,\n          inStockOrdersView.quantity AS quantity\n    FROM inStockOrdersView\n    GROUP BY inStockOrdersView.shopId, inStockOrdersView.productId\n  ) AS orderTable ON orderTable.shopId = shops.id AND orderTable.productId = products.id\n\nLEFT OUTER JOIN\n  (SELECT variants.productId AS productId, COUNT(*) AS supplierCount FROM variants\n   INNER JOIN supplierStocks ON variants.id = supplierStocks.variantId\n   WHERE supplierStocks.deletedAt IS NULL AND variants.deletedAt IS NULL\n   GROUP BY variants.productId) as supplierTable\nON products.id = supplierTable.productId\n\nLEFT OUTER JOIN shopProducts ON products.id = shopProducts.productId AND shopProducts.deletedAt IS NULL)\n    `)}createShopifiedVariantsView(){return log.info(TAG,"createShopifiedVariantsView()"),super.getSequelize().query("\nCREATE VIEW shopifiedVariantsView AS\n(SELECT variants.id as id, variants.productId as productId, variants.name as name,\n        variants.createdAt as createdAt, variants.updatedAt as updatedAt,\n        shops.id as shopId,\n        IFNULL(shopStocksTable.stockQuantity, 0) - IFNULL(orderTable.quantity, 0) as stockQuantity,\n        IFNULL(supplierStocksTable.supplierCount, 0) as supplierCount\nFROM (SELECT * FROM variants WHERE variants.deletedAt IS NULL) AS variants\n\nCROSS JOIN shops\n\nLEFT OUTER JOIN\n  (SELECT shopStocks.variantId as variantId, shopStocks.shopId as shopId, SUM(shopStocks.quantity) as stockQuantity\n    FROM shopStocks\n    WHERE shopStocks.deletedAt IS NULL\n    GROUP BY shopStocks.variantId, shopStocks.shopId) as shopStocksTable\nON variants.id = shopStocksTable.variantId AND shops.id = shopStocksTable.shopId\n\nLEFT OUTER JOIN\n  (SELECT inStockOrdersView.shopId AS shopId, inStockOrdersView.quantity, inStockOrdersView.variantId\n    FROM inStockOrdersView\n    GROUP BY inStockOrdersView.shopId, inStockOrdersView.variantId\n  ) AS orderTable ON orderTable.shopId = shops.id AND orderTable.variantId = variants.id\n\nLEFT OUTER JOIN\n  (SELECT supplierStocks.variantId as variantId, COUNT(*) as supplierCount\n   FROM supplierStocks\n   WHERE supplierStocks.deletedAt IS NULL\n   GROUP BY supplierStocks.variantId) as supplierStocksTable\nON variants.id = supplierStocksTable.variantId\n);\n    ")}createInStockProductsView(){return log.info(TAG,"createInStockProductsView()"),super.getSequelize().query("\nCREATE VIEW inStockProductsView AS\n(SELECT spView.id as id,\n        spView.subCategoryId as subCategoryId, spView.subCategoryName as subCategoryName,\n        spView.categoryId as categoryId, spView.categoryName as categoryName,\n        spView.shopId as shopId,\n        spView.name as name, spView.description as description, spView.createdAt as createdAt,\n        spView.updatedAt as updatedAt, spView.warranty as warranty,\n        IFNULL(spView.shopPrice, spView.defaultPrice) as price, spView.stockQuantity as stockQuantity\n  FROM shopifiedProductsView as spView WHERE disabled = FALSE and stockQuantity > 0\n);")}createInStockVariantsView(){return log.info(TAG,"createInStockVariantsView()"),super.getSequelize().query("\nCREATE VIEW inStockVariantsView AS\n(\nSELECT svView.id as id, svView.shopId as shopId, svView.productId as productId,\n       svView.name as name, svView.stockQuantity as stockQuantity, svView.createdAt as createdAt, svView.updatedAt as updatedAt\nFROM shopifiedVariantsView as svView WHERE stockQuantity > 0\n);\n")}createPOProductsView(){return log.info(TAG,"createPOProductsView()"),super.getSequelize().query("\nCREATE VIEW poProductsView AS\n(\nSELECT spView.id as id, spView.shopId as shopId, spView.name as name,\n       spView.subCategoryId as subCategoryId, spView.subCategoryName as subCategoryName,\n       spView.categoryId as categoryId, spView.categoryName as categoryName,\n       spView.description as description, spView.createdAt as createdAt, spView.updatedAt as updatedAt,\n       spView.warranty as warranty, IFNULL(spView.shopPrice, spView.defaultPrice) as price, spView.preOrderDuration as preOrderDuration\nFROM shopifiedProductsView as spView WHERE disabled = FALSE AND preOrderAllowed = TRUE AND supplierCount > 0 AND stockQuantity = 0\n);\n")}createPOVariantsView(){return log.info(TAG,"createPOVariantsView()"),super.getSequelize().query("\nCREATE VIEW poVariantsView AS\n(\nSELECT svView.id as id, svView.shopId as shopId, svView.productId as productId, svView.createdAt as createdAt, svView.updatedAt as updatedAt,\n        svView.name as name, svView.supplierCount as supplierCount\nFROM shopifiedVariantsView as svView WHERE supplierCount > 0\n);")}createOrderView(){return super.getSequelize().query("\nCREATE VIEW ordersView AS\n(\nSELECT orders.id as id, orders.fullName as fullName, orders.phoneNumber as phoneNumber,\n       orders.notes as notes, orders.status as status, orders.createdAt as createdAt,\n       orders.updatedAt as updatedAt, SUM(orderDetails.quantity) as quantity,\n       SUM(orderDetails.price * orderDetails.quantity) as price, orders.shopId as shopId\nFROM (SELECT * FROM orders WHERE orders.deletedAt IS NULL) AS orders\nLEFT OUTER JOIN orderDetails on orderDetails.orderId = orders.id AND orderDetails.deletedAt IS NULL\nLEFT OUTER JOIN variants ON variants.id = orderDetails.variantId AND variants.deletedAt IS NULL\nGROUP BY orders.id\n);")}createOrderDetailsView(){return super.getSequelize().query("\nCREATE VIEW orderDetailsView AS\n(\nSELECT orderDetails.id AS id, orderDetails.orderId AS orderId, orderDetails.quantity AS quantity,\n       orderDetails.price AS price, orderDetails.status AS status,\n       orderDetails.createdAt AS createdAt, orderDetails.updatedAt AS updatedAt,\n       variants.name AS variantName, variants.id AS variantId,\n       products.name AS productName, products.id AS productId,\n       shopifiedProductsView.preOrderDuration AS preOrderDuration\nFROM (SELECT * FROM orderDetails WHERE orderDetails.deletedAt IS NULL) AS orderDetails\nINNER JOIN variants ON orderDetails.variantId = variants.id AND variants.deletedAt IS NULL\nINNER JOIN products ON variants.productId = products.id AND products.deletedAt IS NULL\n# Although orders is not used, it's needed so we don't count orders that are already deleted\nINNER JOIN orders ON orders.id = orderDetails.orderId AND orders.deletedAt IS NULL\nINNER JOIN shopifiedProductsView on variants.productId = shopifiedProductsView.id AND shopifiedProductsView.shopId = orders.shopId\n);")}createShopifiedPromotionsViews(){return super.getSequelize().query("\nCREATE VIEW shopifiedPromotionsView AS\n(\nSELECT promotions.id AS id, promotions.createdAt AS createdAt,\n       promotions.updatedAt AS updatedAt, promotions.shopId AS shopId,\n       promotions.name AS name,\n       promotions.productId AS productId, promotions.imageFilename AS imageFilename,\n       shopifiedProductsView.name AS productName,\n       shopifiedProductsView.shopPrice AS productPrice\nFROM (SELECT * FROM promotions WHERE deletedAT IS NULL) AS promotions\nINNER JOIN shopifiedProductsView ON promotions.productId = shopifiedProductsView.id AND promotions.shopId = shopifiedProductsView.shopId\n);")}destroyViews(){log.info(TAG,"destroyViews()");return["inStockOrdersView","shopifiedProductsView","shopifiedVariantsView","inStockProductsView","inStockVariantsView","poProductsView","poVariantsView","ordersView","orderDetailsView","shopifiedPromotionsView"].reduce((e,t)=>e.then(()=>{}).catch(e=>{log.info(TAG,e)}).finally(()=>super.getSequelize().query(`DROP VIEW ${t};`).catch(()=>{})),Promise.resolve())}populateViews(){const e=[this.createInStockOrdersView,this.createShopifiedProductsView,this.createShopifiedVariantsView,this.createInStockProductsView,this.createInStockVariantsView,this.createPOProductsView,this.createPOVariantsView,this.createOrderView,this.createOrderDetailsView,this.createShopifiedPromotionsViews];return this.destroyViews().then(t=>e.reduce((e,t)=>e.then(()=>t()),Promise.resolve()))}}exports.default=new SQLViewService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2aWNlcy9zcWwtdmlldy1zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbImNydWRfc2VydmljZV8xIiwicmVxdWlyZSIsIlByb21pc2UiLCJhcHBfY29uZmlnXzEiLCJsb2ciLCJUQUciLCJTUUxWaWV3U2VydmljZSIsIkNSVURTZXJ2aWNlIiwiW29iamVjdCBPYmplY3RdIiwic3VwZXIiLCJnZXRTZXF1ZWxpemUiLCJxdWVyeSIsImluZm8iLCJkZWZhdWx0IiwiREVGQVVMVF9TSE9QX1BST0RVQ1RfQkVIQVZJT1IiLCJwcmVPcmRlckFsbG93ZWQiLCJwcmVPcmRlckR1cmF0aW9uIiwiZGlzYWJsZWQiLCJyZWR1Y2UiLCJhY2MiLCJ2aWV3IiwidGhlbiIsImNhdGNoIiwiZXJyIiwiZmluYWxseSIsInJlc29sdmUiLCJwcm9taXNlcyIsInRoaXMiLCJjcmVhdGVJblN0b2NrT3JkZXJzVmlldyIsImNyZWF0ZVNob3BpZmllZFByb2R1Y3RzVmlldyIsImNyZWF0ZVNob3BpZmllZFZhcmlhbnRzVmlldyIsImNyZWF0ZUluU3RvY2tQcm9kdWN0c1ZpZXciLCJjcmVhdGVJblN0b2NrVmFyaWFudHNWaWV3IiwiY3JlYXRlUE9Qcm9kdWN0c1ZpZXciLCJjcmVhdGVQT1ZhcmlhbnRzVmlldyIsImNyZWF0ZU9yZGVyVmlldyIsImNyZWF0ZU9yZGVyRGV0YWlsc1ZpZXciLCJjcmVhdGVTaG9waWZpZWRQcm9tb3Rpb25zVmlld3MiLCJkZXN0cm95Vmlld3MiLCJyZXN1bHQiLCJwcm9taXNlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Im9FQUFBLE1BQUFBLGVBQUFDLFFBQUEsa0JBRUFDLFFBQUFELFFBQUEsWUFFQUUsYUFBQUYsUUFBQSxpQkFFQSxJQUFJRyxJQUFNSCxRQUFRLFVBRWxCLE1BQU1JLElBQU0sdUJBS1pDLHVCQUE2Qk4sZUFBQU8sWUFJM0JDLDBCQUNFLE9BQU9DLE1BQU1DLGVBQWVDLE1BQU0scW9CQXdCcENILDhCQUVFLE9BREFKLElBQUlRLEtBQUtQLElBQUssaUNBQ1BJLE1BQU1DLGVBQWVDLHd6QkFjY1IsYUFBQVUsUUFBVUMsOEJBQThCQyxnQkFBa0IsT0FBUywrRUFDakVaLGFBQUFVLFFBQVVDLDhCQUE4QkUsaUZBQ2hEYixhQUFBVSxRQUFVQyw4QkFBOEJHLCsvQ0FtQzlFVCw4QkFFRSxPQURBSixJQUFJUSxLQUFLUCxJQUFLLGlDQUNQSSxNQUFNQyxlQUFlQyxNQUFNLGk2Q0FrQ3BDSCw0QkFFRSxPQURBSixJQUFJUSxLQUFLUCxJQUFLLCtCQUNQSSxNQUFNQyxlQUFlQyxNQUFNLG1uQkFhcENILDRCQUVFLE9BREFKLElBQUlRLEtBQUtQLElBQUssK0JBQ1BJLE1BQU1DLGVBQWVDLE1BQU0saVVBVXBDSCx1QkFFRSxPQURBSixJQUFJUSxLQUFLUCxJQUFLLDBCQUNQSSxNQUFNQyxlQUFlQyxNQUFNLGlwQkFjcENILHVCQUVFLE9BREFKLElBQUlRLEtBQUtQLElBQUssMEJBQ1BJLE1BQU1DLGVBQWVDLE1BQU0sMlRBU3BDSCxrQkFDRSxPQUFPQyxNQUFNQyxlQUFlQyxNQUFNLCtwQkFjcENILHlCQUNFLE9BQU9DLE1BQU1DLGVBQWVDLE1BQU0sMGlDQWtCcENILGlDQUNFLE9BQU9DLE1BQU1DLGVBQWVDLE1BQU0sOG1CQWNwQ0gsZUFDRUosSUFBSVEsS0FBS1AsSUFBSyxrQkFNZCxPQUplLG9CQUFxQix3QkFBeUIsd0JBQzNELHNCQUF1QixzQkFBdUIsaUJBQWtCLGlCQUNoRSxhQUFjLG1CQUFvQiwyQkFFdkJhLE9BQU8sQ0FBQ0MsRUFBS0MsSUFDakJELEVBQUlFLEtBQUssUUFFYkMsTUFBTUMsSUFDUG5CLElBQUlRLEtBQUtQLElBQUtrQixLQUNiQyxRQUFRLElBR0ZmLE1BQU1DLGVBQWVDLG1CQUFtQlMsTUFBU0UsTUFBTSxTQUkvRHBCLFFBQVF1QixXQUdiakIsZ0JBQ0UsTUFBTWtCLEdBQ0pDLEtBQUtDLHdCQUNMRCxLQUFLRSw0QkFDTEYsS0FBS0csNEJBQ0xILEtBQUtJLDBCQUNMSixLQUFLSywwQkFDTEwsS0FBS00scUJBQ0xOLEtBQUtPLHFCQUNMUCxLQUFLUSxnQkFDTFIsS0FBS1MsdUJBQ0xULEtBQUtVLGdDQUVQLE9BQU9WLEtBQUtXLGVBQWVqQixLQUFLa0IsR0FDdkJiLEVBQVNSLE9BQU8sQ0FBQ0MsRUFBS3FCLElBQ3BCckIsRUFBSUUsS0FBSyxJQUNQbUIsS0FFUnRDLFFBQVF1QixhQUtqQmdCLFFBQUE1QixRQUFlLElBQUlQIiwiZmlsZSI6InNlcnZpY2VzL3NxbC12aWV3LXNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDUlVEU2VydmljZSB9IGZyb20gJy4vY3J1ZC1zZXJ2aWNlJ1xuaW1wb3J0IHsgTW9kZWwsIEluc3RhbmNlIH0gZnJvbSAnc2VxdWVsaXplJ1xuaW1wb3J0ICogYXMgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcblxuaW1wb3J0IEFwcENvbmZpZyBmcm9tICcuLi9hcHAtY29uZmlnJ1xuXG5sZXQgbG9nID0gcmVxdWlyZSgnbnBtbG9nJylcblxuY29uc3QgVEFHID0gJ1NRTFZpZXdTZXJ2aWNlJ1xuLypcbiAgVGhpcyBpcyB1c2VkIGJ5IFNob3BNYW5hZ2VtZW50IGluIHRoZSBDTVMuXG4gIFdlIGhhdmUgTG9jYWxTaG9wU2VydmljZSwgdGhpcyBpcyBzcGVjaWZpY2FsbHkgZm9yIHNob3Atc3BlY2lmaWMgY29kZS5cbiovXG5jbGFzcyBTUUxWaWV3U2VydmljZSBleHRlbmRzIENSVURTZXJ2aWNlIHtcbiAgLy8gR2V0IHF1YW50aXR5IG9mIG9yZGVycyB0aGF0IGFyZSBpblN0b2NrIChpLmUuIG5vdCBQTylcbiAgLy8gVGhpcyBpcyB1c2VkIHRvIGNvbXB1dGUgdGhlIG51bWJlciBvZiByZW1haW5pbmcgc3RvY2tzXG4gIC8vIChpLmUuIHN0b2NrcyBsZWZ0IGZvciB2YXJpYW50IFggPSBhbGwgc2hvcCBzdG9ja3MgLSBhbGwgaW4tc3RvY2sgb3JkZXJzKVxuICBjcmVhdGVJblN0b2NrT3JkZXJzVmlldyAoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGBcbkNSRUFURSBWSUVXIGluU3RvY2tPcmRlcnNWaWV3IEFTXG4oU0VMRUNUIG9yZGVycy5zaG9wSWQgQVMgc2hvcElkLFxuICAgICAgICAjIE9ubHkgdGhlIHF1YW50aXR5IG9mICdSZWFkeSctc3RvY2sgaXRlbSBpcyBjb25zaWRlcmVkIHdoZW4gY2FsY3VsYXRpbmcgc3RvY2tRdWFudGl0eVxuICAgICAgICBTVU0oSUYob3JkZXJEZXRhaWxzLnN0YXR1cyA9ICdSZWFkeScsIG9yZGVyRGV0YWlscy5xdWFudGl0eSwgMCkpIEFTIHF1YW50aXR5LFxuICAgICAgICB2YXJpYW50cy5wcm9kdWN0SWQsIHZhcmlhbnRzLmlkIGFzIHZhcmlhbnRJZFxuRlJPTSBvcmRlcnNcbkxFRlQgT1VURVIgSk9JTiBvcmRlckRldGFpbHMgT04gb3JkZXJEZXRhaWxzLm9yZGVySWQgPSBvcmRlcnMuaWQgQU5EIG9yZGVyRGV0YWlscy5kZWxldGVkQXQgSVMgTlVMTFxuTEVGVCBPVVRFUiBKT0lOIHZhcmlhbnRzIE9OIHZhcmlhbnRzLmlkID0gb3JkZXJEZXRhaWxzLnZhcmlhbnRJZCBBTkQgdmFyaWFudHMuZGVsZXRlZEF0IElTIE5VTExcbldIRVJFIG9yZGVycy5zdGF0dXMgIT0gJ0NhbmNlbGxlZCcgQU5EIG9yZGVycy5kZWxldGVkQXQgSVMgTlVMTFxuR1JPVVAgQlkgb3JkZXJzLnNob3BJZCwgdmFyaWFudHMucHJvZHVjdElkLCB2YXJpYW50cy5pZClcbmApXG4gIH1cbiAgLypcbiAgICBUaGlzIHZpZXcgY29tYmluZXM6XG4gICAgMS4gUHJvZHVjdCAtPiBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBhdmFpbGFibGUgcHJvZHVjdHNcbiAgICAyLiBTaG9wUHJvZHVjdCAtPiBzaG9wLXNwZWNpZmljIGluZm9ybWF0aW9uLCB1c2VkIGZvciBwZXItc2hvcCBwcm9kdWN0IHBlcnNvbmFsaXR6YXRpb25cbiAgICAzLiBTaG9wU3RvY2sgLT4gZmlndXJlIG91dCBob3cgbWFueSBwaHlzaWNhbCBzdG9ja3MgYXZhaWxhYmxlXG4gICAgNC4gT3JkZXJEZXRhaWwgLT4gZmlndXJlIG91dCBob3cgbWFueSBvZiB0aGUgcGh5c2ljYWwgc3RvY2tzIGhhdmUgYmVlbiB1c2VkIHVwXG4gICAgNS4gU3VwcGxpZXJTdG9jayAtPiBmaWd1cmUgb3V0IGhvdyBtYW55IHN1cHBsaWVycyBhdmFpbGFibGVcblxuICAgIFRPRE86XG4gICAgMS4gVGhpcyBzaG91bGQgZGVwZW5kIG9uIHNob3BpZmllZFZhcmlhbnRzVmlldywgc28gdGhhdCB3ZSBkb24ndCBjb21wdXRlIHN0b2NrcyBmcm9tIHR3byBkaWZmZXJlbnQgcGxhY2VzXG4gICovXG4gIGNyZWF0ZVNob3BpZmllZFByb2R1Y3RzVmlldyAoKSB7XG4gICAgbG9nLmluZm8oVEFHLCAnY3JlYXRlU2hvcGlmaWVkUHJvZHVjdHNWaWV3KCknKVxuICAgIHJldHVybiBzdXBlci5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5DUkVBVEUgVklFVyBzaG9waWZpZWRQcm9kdWN0c1ZpZXcgQVNcbihTRUxFQ1QgcHJvZHVjdHMuaWQsIHByb2R1Y3RzLm5hbWUgYXMgbmFtZSwgcHJvZHVjdHMuZGVzY3JpcHRpb24gYXMgZGVzY3JpcHRpb24sXG4gICAgICAgIHByb2R1Y3RzLndhcnJhbnR5IGFzIHdhcnJhbnR5LCBwcm9kdWN0cy5wcmljZSBhcyBkZWZhdWx0UHJpY2UsXG4gICAgICAgIHN1YkNhdGVnb3JpZXMuaWQgYXMgc3ViQ2F0ZWdvcnlJZCxcbiAgICAgICAgc3ViQ2F0ZWdvcmllcy5uYW1lIEFTIHN1YkNhdGVnb3J5TmFtZSxcbiAgICAgICAgY2F0ZWdvcmllcy5pZCBBUyBjYXRlZ29yeUlkLFxuICAgICAgICBjYXRlZ29yaWVzLm5hbWUgQVMgY2F0ZWdvcnlOYW1lLFxuICAgICAgICBzaG9wcy5pZCBhcyBzaG9wSWQsXG4gICAgICAgIElGTlVMTChzdG9ja1RhYmxlLnN0b2NrUXVhbnRpdHksIDApIC0gSUZOVUxMKG9yZGVyVGFibGUucXVhbnRpdHksIDApIGFzIHN0b2NrUXVhbnRpdHksXG4gICAgICAgIElGTlVMTChzdXBwbGllclRhYmxlLnN1cHBsaWVyQ291bnQsIDApIGFzIHN1cHBsaWVyQ291bnQsXG4gICAgICAgIElGTlVMTChzaG9wUHJvZHVjdHMuY3JlYXRlZEF0LCBwcm9kdWN0cy5jcmVhdGVkQXQpIGFzIGNyZWF0ZWRBdCxcbiAgICAgICAgSUZOVUxMKHNob3BQcm9kdWN0cy51cGRhdGVkQXQsIHByb2R1Y3RzLnVwZGF0ZWRBdCkgYXMgdXBkYXRlZEF0LFxuICAgICAgICBJRk5VTEwoc2hvcFByb2R1Y3RzLnByaWNlLCBwcm9kdWN0cy5wcmljZSkgYXMgc2hvcFByaWNlLFxuICAgICAgICBJRk5VTEwoc2hvcFByb2R1Y3RzLnByZU9yZGVyQWxsb3dlZCwke0FwcENvbmZpZy5ERUZBVUxUX1NIT1BfUFJPRFVDVF9CRUhBVklPUi5wcmVPcmRlckFsbG93ZWQgPyAnVFJVRScgOiAnRkFMU0UnfSkgYXMgcHJlT3JkZXJBbGxvd2VkLFxuICAgICAgICBJRk5VTEwoc2hvcFByb2R1Y3RzLnByZU9yZGVyRHVyYXRpb24sICR7QXBwQ29uZmlnLkRFRkFVTFRfU0hPUF9QUk9EVUNUX0JFSEFWSU9SLnByZU9yZGVyRHVyYXRpb259KSBhcyBwcmVPcmRlckR1cmF0aW9uLFxuICAgICAgICBJRk5VTEwoc2hvcFByb2R1Y3RzLmRpc2FibGVkLCAke0FwcENvbmZpZy5ERUZBVUxUX1NIT1BfUFJPRFVDVF9CRUhBVklPUi5kaXNhYmxlZH0pIGFzIGRpc2FibGVkXG5GUk9NIChTRUxFQ1QgKiBGUk9NIHByb2R1Y3RzIFdIRVJFIGRlbGV0ZWRBdCBJUyBOVUxMKSBBUyBwcm9kdWN0c1xuXG5DUk9TUyBKT0lOIHNob3BzXG5cbklOTkVSIEpPSU4gc3ViQ2F0ZWdvcmllcyBPTiBzdWJDYXRlZ29yaWVzLmlkID0gcHJvZHVjdHMuc3ViQ2F0ZWdvcnlJZCBBTkQgc3ViQ2F0ZWdvcmllcy5kZWxldGVkQXQgSVMgTlVMTFxuSU5ORVIgSk9JTiBjYXRlZ29yaWVzIE9OIGNhdGVnb3JpZXMuaWQgPSBzdWJDYXRlZ29yaWVzLmNhdGVnb3J5SWQgQU5EIGNhdGVnb3JpZXMuZGVsZXRlZEF0IElTIE5VTExcblxuTEVGVCBPVVRFUiBKT0lOXG4gIChTRUxFQ1QgdmFyaWFudHMucHJvZHVjdElkIEFTIHByb2R1Y3RJZCwgU1VNKHNob3BTdG9ja3MucXVhbnRpdHkpIHN0b2NrUXVhbnRpdHksIHNob3BTdG9ja3Muc2hvcElkIGFzIHNob3BJZFxuICAgRlJPTSB2YXJpYW50cyBJTk5FUiBKT0lOIHNob3BTdG9ja3MgT04gdmFyaWFudHMuaWQgPSBzaG9wU3RvY2tzLnZhcmlhbnRJZFxuICAgV0hFUkUgdmFyaWFudHMuZGVsZXRlZEF0IElTIE5VTEwgQU5EIHNob3BTdG9ja3MuZGVsZXRlZEF0IElTIE5VTExcbiAgIEdST1VQIEJZIHNob3BTdG9ja3Muc2hvcElkLCB2YXJpYW50cy5wcm9kdWN0SWQpIEFTIHN0b2NrVGFibGVcbk9OIHByb2R1Y3RzLmlkID0gc3RvY2tUYWJsZS5wcm9kdWN0SWQgQU5EIHNob3BzLmlkID0gc3RvY2tUYWJsZS5zaG9wSWRcblxuTEVGVCBPVVRFUiBKT0lOXG4gIChTRUxFQ1QgaW5TdG9ja09yZGVyc1ZpZXcuc2hvcElkIEFTIHNob3BJZCxcbiAgICAgICAgICBpblN0b2NrT3JkZXJzVmlldy5wcm9kdWN0SWQsXG4gICAgICAgICAgaW5TdG9ja09yZGVyc1ZpZXcucXVhbnRpdHkgQVMgcXVhbnRpdHlcbiAgICBGUk9NIGluU3RvY2tPcmRlcnNWaWV3XG4gICAgR1JPVVAgQlkgaW5TdG9ja09yZGVyc1ZpZXcuc2hvcElkLCBpblN0b2NrT3JkZXJzVmlldy5wcm9kdWN0SWRcbiAgKSBBUyBvcmRlclRhYmxlIE9OIG9yZGVyVGFibGUuc2hvcElkID0gc2hvcHMuaWQgQU5EIG9yZGVyVGFibGUucHJvZHVjdElkID0gcHJvZHVjdHMuaWRcblxuTEVGVCBPVVRFUiBKT0lOXG4gIChTRUxFQ1QgdmFyaWFudHMucHJvZHVjdElkIEFTIHByb2R1Y3RJZCwgQ09VTlQoKikgQVMgc3VwcGxpZXJDb3VudCBGUk9NIHZhcmlhbnRzXG4gICBJTk5FUiBKT0lOIHN1cHBsaWVyU3RvY2tzIE9OIHZhcmlhbnRzLmlkID0gc3VwcGxpZXJTdG9ja3MudmFyaWFudElkXG4gICBXSEVSRSBzdXBwbGllclN0b2Nrcy5kZWxldGVkQXQgSVMgTlVMTCBBTkQgdmFyaWFudHMuZGVsZXRlZEF0IElTIE5VTExcbiAgIEdST1VQIEJZIHZhcmlhbnRzLnByb2R1Y3RJZCkgYXMgc3VwcGxpZXJUYWJsZVxuT04gcHJvZHVjdHMuaWQgPSBzdXBwbGllclRhYmxlLnByb2R1Y3RJZFxuXG5MRUZUIE9VVEVSIEpPSU4gc2hvcFByb2R1Y3RzIE9OIHByb2R1Y3RzLmlkID0gc2hvcFByb2R1Y3RzLnByb2R1Y3RJZCBBTkQgc2hvcFByb2R1Y3RzLmRlbGV0ZWRBdCBJUyBOVUxMKVxuICAgIGApXG4gIH1cblxuICAvLyBUT0RPOiBTb3VuZHMgbGlrZSBzdXBwbGllclN0b2Nrc1RhYmxlIGlzIG1pc3Rha2VuPyBTaG91bGQgZG91YmxlIGNoZWNrIGl0XG4gIGNyZWF0ZVNob3BpZmllZFZhcmlhbnRzVmlldyAoKSB7XG4gICAgbG9nLmluZm8oVEFHLCAnY3JlYXRlU2hvcGlmaWVkVmFyaWFudHNWaWV3KCknKVxuICAgIHJldHVybiBzdXBlci5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5DUkVBVEUgVklFVyBzaG9waWZpZWRWYXJpYW50c1ZpZXcgQVNcbihTRUxFQ1QgdmFyaWFudHMuaWQgYXMgaWQsIHZhcmlhbnRzLnByb2R1Y3RJZCBhcyBwcm9kdWN0SWQsIHZhcmlhbnRzLm5hbWUgYXMgbmFtZSxcbiAgICAgICAgdmFyaWFudHMuY3JlYXRlZEF0IGFzIGNyZWF0ZWRBdCwgdmFyaWFudHMudXBkYXRlZEF0IGFzIHVwZGF0ZWRBdCxcbiAgICAgICAgc2hvcHMuaWQgYXMgc2hvcElkLFxuICAgICAgICBJRk5VTEwoc2hvcFN0b2Nrc1RhYmxlLnN0b2NrUXVhbnRpdHksIDApIC0gSUZOVUxMKG9yZGVyVGFibGUucXVhbnRpdHksIDApIGFzIHN0b2NrUXVhbnRpdHksXG4gICAgICAgIElGTlVMTChzdXBwbGllclN0b2Nrc1RhYmxlLnN1cHBsaWVyQ291bnQsIDApIGFzIHN1cHBsaWVyQ291bnRcbkZST00gKFNFTEVDVCAqIEZST00gdmFyaWFudHMgV0hFUkUgdmFyaWFudHMuZGVsZXRlZEF0IElTIE5VTEwpIEFTIHZhcmlhbnRzXG5cbkNST1NTIEpPSU4gc2hvcHNcblxuTEVGVCBPVVRFUiBKT0lOXG4gIChTRUxFQ1Qgc2hvcFN0b2Nrcy52YXJpYW50SWQgYXMgdmFyaWFudElkLCBzaG9wU3RvY2tzLnNob3BJZCBhcyBzaG9wSWQsIFNVTShzaG9wU3RvY2tzLnF1YW50aXR5KSBhcyBzdG9ja1F1YW50aXR5XG4gICAgRlJPTSBzaG9wU3RvY2tzXG4gICAgV0hFUkUgc2hvcFN0b2Nrcy5kZWxldGVkQXQgSVMgTlVMTFxuICAgIEdST1VQIEJZIHNob3BTdG9ja3MudmFyaWFudElkLCBzaG9wU3RvY2tzLnNob3BJZCkgYXMgc2hvcFN0b2Nrc1RhYmxlXG5PTiB2YXJpYW50cy5pZCA9IHNob3BTdG9ja3NUYWJsZS52YXJpYW50SWQgQU5EIHNob3BzLmlkID0gc2hvcFN0b2Nrc1RhYmxlLnNob3BJZFxuXG5MRUZUIE9VVEVSIEpPSU5cbiAgKFNFTEVDVCBpblN0b2NrT3JkZXJzVmlldy5zaG9wSWQgQVMgc2hvcElkLCBpblN0b2NrT3JkZXJzVmlldy5xdWFudGl0eSwgaW5TdG9ja09yZGVyc1ZpZXcudmFyaWFudElkXG4gICAgRlJPTSBpblN0b2NrT3JkZXJzVmlld1xuICAgIEdST1VQIEJZIGluU3RvY2tPcmRlcnNWaWV3LnNob3BJZCwgaW5TdG9ja09yZGVyc1ZpZXcudmFyaWFudElkXG4gICkgQVMgb3JkZXJUYWJsZSBPTiBvcmRlclRhYmxlLnNob3BJZCA9IHNob3BzLmlkIEFORCBvcmRlclRhYmxlLnZhcmlhbnRJZCA9IHZhcmlhbnRzLmlkXG5cbkxFRlQgT1VURVIgSk9JTlxuICAoU0VMRUNUIHN1cHBsaWVyU3RvY2tzLnZhcmlhbnRJZCBhcyB2YXJpYW50SWQsIENPVU5UKCopIGFzIHN1cHBsaWVyQ291bnRcbiAgIEZST00gc3VwcGxpZXJTdG9ja3NcbiAgIFdIRVJFIHN1cHBsaWVyU3RvY2tzLmRlbGV0ZWRBdCBJUyBOVUxMXG4gICBHUk9VUCBCWSBzdXBwbGllclN0b2Nrcy52YXJpYW50SWQpIGFzIHN1cHBsaWVyU3RvY2tzVGFibGVcbk9OIHZhcmlhbnRzLmlkID0gc3VwcGxpZXJTdG9ja3NUYWJsZS52YXJpYW50SWRcbik7XG4gICAgYClcbiAgfVxuXG4gIGNyZWF0ZUluU3RvY2tQcm9kdWN0c1ZpZXcgKCkge1xuICAgIGxvZy5pbmZvKFRBRywgJ2NyZWF0ZUluU3RvY2tQcm9kdWN0c1ZpZXcoKScpXG4gICAgcmV0dXJuIHN1cGVyLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGBcbkNSRUFURSBWSUVXIGluU3RvY2tQcm9kdWN0c1ZpZXcgQVNcbihTRUxFQ1Qgc3BWaWV3LmlkIGFzIGlkLFxuICAgICAgICBzcFZpZXcuc3ViQ2F0ZWdvcnlJZCBhcyBzdWJDYXRlZ29yeUlkLCBzcFZpZXcuc3ViQ2F0ZWdvcnlOYW1lIGFzIHN1YkNhdGVnb3J5TmFtZSxcbiAgICAgICAgc3BWaWV3LmNhdGVnb3J5SWQgYXMgY2F0ZWdvcnlJZCwgc3BWaWV3LmNhdGVnb3J5TmFtZSBhcyBjYXRlZ29yeU5hbWUsXG4gICAgICAgIHNwVmlldy5zaG9wSWQgYXMgc2hvcElkLFxuICAgICAgICBzcFZpZXcubmFtZSBhcyBuYW1lLCBzcFZpZXcuZGVzY3JpcHRpb24gYXMgZGVzY3JpcHRpb24sIHNwVmlldy5jcmVhdGVkQXQgYXMgY3JlYXRlZEF0LFxuICAgICAgICBzcFZpZXcudXBkYXRlZEF0IGFzIHVwZGF0ZWRBdCwgc3BWaWV3LndhcnJhbnR5IGFzIHdhcnJhbnR5LFxuICAgICAgICBJRk5VTEwoc3BWaWV3LnNob3BQcmljZSwgc3BWaWV3LmRlZmF1bHRQcmljZSkgYXMgcHJpY2UsIHNwVmlldy5zdG9ja1F1YW50aXR5IGFzIHN0b2NrUXVhbnRpdHlcbiAgRlJPTSBzaG9waWZpZWRQcm9kdWN0c1ZpZXcgYXMgc3BWaWV3IFdIRVJFIGRpc2FibGVkID0gRkFMU0UgYW5kIHN0b2NrUXVhbnRpdHkgPiAwXG4pO2ApXG4gIH1cblxuICBjcmVhdGVJblN0b2NrVmFyaWFudHNWaWV3ICgpIHtcbiAgICBsb2cuaW5mbyhUQUcsICdjcmVhdGVJblN0b2NrVmFyaWFudHNWaWV3KCknKVxuICAgIHJldHVybiBzdXBlci5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5DUkVBVEUgVklFVyBpblN0b2NrVmFyaWFudHNWaWV3IEFTXG4oXG5TRUxFQ1Qgc3ZWaWV3LmlkIGFzIGlkLCBzdlZpZXcuc2hvcElkIGFzIHNob3BJZCwgc3ZWaWV3LnByb2R1Y3RJZCBhcyBwcm9kdWN0SWQsXG4gICAgICAgc3ZWaWV3Lm5hbWUgYXMgbmFtZSwgc3ZWaWV3LnN0b2NrUXVhbnRpdHkgYXMgc3RvY2tRdWFudGl0eSwgc3ZWaWV3LmNyZWF0ZWRBdCBhcyBjcmVhdGVkQXQsIHN2Vmlldy51cGRhdGVkQXQgYXMgdXBkYXRlZEF0XG5GUk9NIHNob3BpZmllZFZhcmlhbnRzVmlldyBhcyBzdlZpZXcgV0hFUkUgc3RvY2tRdWFudGl0eSA+IDBcbik7XG5gKVxuICB9XG5cbiAgY3JlYXRlUE9Qcm9kdWN0c1ZpZXcgKCkge1xuICAgIGxvZy5pbmZvKFRBRywgJ2NyZWF0ZVBPUHJvZHVjdHNWaWV3KCknKVxuICAgIHJldHVybiBzdXBlci5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5DUkVBVEUgVklFVyBwb1Byb2R1Y3RzVmlldyBBU1xuKFxuU0VMRUNUIHNwVmlldy5pZCBhcyBpZCwgc3BWaWV3LnNob3BJZCBhcyBzaG9wSWQsIHNwVmlldy5uYW1lIGFzIG5hbWUsXG4gICAgICAgc3BWaWV3LnN1YkNhdGVnb3J5SWQgYXMgc3ViQ2F0ZWdvcnlJZCwgc3BWaWV3LnN1YkNhdGVnb3J5TmFtZSBhcyBzdWJDYXRlZ29yeU5hbWUsXG4gICAgICAgc3BWaWV3LmNhdGVnb3J5SWQgYXMgY2F0ZWdvcnlJZCwgc3BWaWV3LmNhdGVnb3J5TmFtZSBhcyBjYXRlZ29yeU5hbWUsXG4gICAgICAgc3BWaWV3LmRlc2NyaXB0aW9uIGFzIGRlc2NyaXB0aW9uLCBzcFZpZXcuY3JlYXRlZEF0IGFzIGNyZWF0ZWRBdCwgc3BWaWV3LnVwZGF0ZWRBdCBhcyB1cGRhdGVkQXQsXG4gICAgICAgc3BWaWV3LndhcnJhbnR5IGFzIHdhcnJhbnR5LCBJRk5VTEwoc3BWaWV3LnNob3BQcmljZSwgc3BWaWV3LmRlZmF1bHRQcmljZSkgYXMgcHJpY2UsIHNwVmlldy5wcmVPcmRlckR1cmF0aW9uIGFzIHByZU9yZGVyRHVyYXRpXFxcbm9uXG5GUk9NIHNob3BpZmllZFByb2R1Y3RzVmlldyBhcyBzcFZpZXcgV0hFUkUgZGlzYWJsZWQgPSBGQUxTRSBBTkQgcHJlT3JkZXJBbGxvd2VkID0gVFJVRSBBTkQgc3VwcGxpZXJDb3VudCA+IDAgQU5EIHN0b2NrUXVhbnRpdHkgPSAwXG4pO1xuYClcbiAgfVxuXG4gIGNyZWF0ZVBPVmFyaWFudHNWaWV3ICgpIHtcbiAgICBsb2cuaW5mbyhUQUcsICdjcmVhdGVQT1ZhcmlhbnRzVmlldygpJylcbiAgICByZXR1cm4gc3VwZXIuZ2V0U2VxdWVsaXplKCkucXVlcnkoYFxuQ1JFQVRFIFZJRVcgcG9WYXJpYW50c1ZpZXcgQVNcbihcblNFTEVDVCBzdlZpZXcuaWQgYXMgaWQsIHN2Vmlldy5zaG9wSWQgYXMgc2hvcElkLCBzdlZpZXcucHJvZHVjdElkIGFzIHByb2R1Y3RJZCwgc3ZWaWV3LmNyZWF0ZWRBdCBhcyBjcmVhdGVkQXQsIHN2Vmlldy51cGRhdGVkQXQgYXMgdXBkYXRlZEF0LFxuICAgICAgICBzdlZpZXcubmFtZSBhcyBuYW1lLCBzdlZpZXcuc3VwcGxpZXJDb3VudCBhcyBzdXBwbGllckNvdW50XG5GUk9NIHNob3BpZmllZFZhcmlhbnRzVmlldyBhcyBzdlZpZXcgV0hFUkUgc3VwcGxpZXJDb3VudCA+IDBcbik7YClcbiAgfVxuXG4gIGNyZWF0ZU9yZGVyVmlldyAoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGBcbkNSRUFURSBWSUVXIG9yZGVyc1ZpZXcgQVNcbihcblNFTEVDVCBvcmRlcnMuaWQgYXMgaWQsIG9yZGVycy5mdWxsTmFtZSBhcyBmdWxsTmFtZSwgb3JkZXJzLnBob25lTnVtYmVyIGFzIHBob25lTnVtYmVyLFxuICAgICAgIG9yZGVycy5ub3RlcyBhcyBub3Rlcywgb3JkZXJzLnN0YXR1cyBhcyBzdGF0dXMsIG9yZGVycy5jcmVhdGVkQXQgYXMgY3JlYXRlZEF0LFxuICAgICAgIG9yZGVycy51cGRhdGVkQXQgYXMgdXBkYXRlZEF0LCBTVU0ob3JkZXJEZXRhaWxzLnF1YW50aXR5KSBhcyBxdWFudGl0eSxcbiAgICAgICBTVU0ob3JkZXJEZXRhaWxzLnByaWNlICogb3JkZXJEZXRhaWxzLnF1YW50aXR5KSBhcyBwcmljZSwgb3JkZXJzLnNob3BJZCBhcyBzaG9wSWRcbkZST00gKFNFTEVDVCAqIEZST00gb3JkZXJzIFdIRVJFIG9yZGVycy5kZWxldGVkQXQgSVMgTlVMTCkgQVMgb3JkZXJzXG5MRUZUIE9VVEVSIEpPSU4gb3JkZXJEZXRhaWxzIG9uIG9yZGVyRGV0YWlscy5vcmRlcklkID0gb3JkZXJzLmlkIEFORCBvcmRlckRldGFpbHMuZGVsZXRlZEF0IElTIE5VTExcbkxFRlQgT1VURVIgSk9JTiB2YXJpYW50cyBPTiB2YXJpYW50cy5pZCA9IG9yZGVyRGV0YWlscy52YXJpYW50SWQgQU5EIHZhcmlhbnRzLmRlbGV0ZWRBdCBJUyBOVUxMXG5HUk9VUCBCWSBvcmRlcnMuaWRcbik7YClcbiAgfVxuXG4gIGNyZWF0ZU9yZGVyRGV0YWlsc1ZpZXcgKCkge1xuICAgIHJldHVybiBzdXBlci5nZXRTZXF1ZWxpemUoKS5xdWVyeShgXG5DUkVBVEUgVklFVyBvcmRlckRldGFpbHNWaWV3IEFTXG4oXG5TRUxFQ1Qgb3JkZXJEZXRhaWxzLmlkIEFTIGlkLCBvcmRlckRldGFpbHMub3JkZXJJZCBBUyBvcmRlcklkLCBvcmRlckRldGFpbHMucXVhbnRpdHkgQVMgcXVhbnRpdHksXG4gICAgICAgb3JkZXJEZXRhaWxzLnByaWNlIEFTIHByaWNlLCBvcmRlckRldGFpbHMuc3RhdHVzIEFTIHN0YXR1cyxcbiAgICAgICBvcmRlckRldGFpbHMuY3JlYXRlZEF0IEFTIGNyZWF0ZWRBdCwgb3JkZXJEZXRhaWxzLnVwZGF0ZWRBdCBBUyB1cGRhdGVkQXQsXG4gICAgICAgdmFyaWFudHMubmFtZSBBUyB2YXJpYW50TmFtZSwgdmFyaWFudHMuaWQgQVMgdmFyaWFudElkLFxuICAgICAgIHByb2R1Y3RzLm5hbWUgQVMgcHJvZHVjdE5hbWUsIHByb2R1Y3RzLmlkIEFTIHByb2R1Y3RJZCxcbiAgICAgICBzaG9waWZpZWRQcm9kdWN0c1ZpZXcucHJlT3JkZXJEdXJhdGlvbiBBUyBwcmVPcmRlckR1cmF0aW9uXG5GUk9NIChTRUxFQ1QgKiBGUk9NIG9yZGVyRGV0YWlscyBXSEVSRSBvcmRlckRldGFpbHMuZGVsZXRlZEF0IElTIE5VTEwpIEFTIG9yZGVyRGV0YWlsc1xuSU5ORVIgSk9JTiB2YXJpYW50cyBPTiBvcmRlckRldGFpbHMudmFyaWFudElkID0gdmFyaWFudHMuaWQgQU5EIHZhcmlhbnRzLmRlbGV0ZWRBdCBJUyBOVUxMXG5JTk5FUiBKT0lOIHByb2R1Y3RzIE9OIHZhcmlhbnRzLnByb2R1Y3RJZCA9IHByb2R1Y3RzLmlkIEFORCBwcm9kdWN0cy5kZWxldGVkQXQgSVMgTlVMTFxuIyBBbHRob3VnaCBvcmRlcnMgaXMgbm90IHVzZWQsIGl0J3MgbmVlZGVkIHNvIHdlIGRvbid0IGNvdW50IG9yZGVycyB0aGF0IGFyZSBhbHJlYWR5IGRlbGV0ZWRcbklOTkVSIEpPSU4gb3JkZXJzIE9OIG9yZGVycy5pZCA9IG9yZGVyRGV0YWlscy5vcmRlcklkIEFORCBvcmRlcnMuZGVsZXRlZEF0IElTIE5VTExcbklOTkVSIEpPSU4gc2hvcGlmaWVkUHJvZHVjdHNWaWV3IG9uIHZhcmlhbnRzLnByb2R1Y3RJZCA9IHNob3BpZmllZFByb2R1Y3RzVmlldy5pZCBBTkQgc2hvcGlmaWVkUHJvZHVjdHNWaWV3LnNob3BJZCA9IG9yZGVycy5zaG9wSWRcbik7YClcbiAgfVxuXG4gIGNyZWF0ZVNob3BpZmllZFByb21vdGlvbnNWaWV3cyAoKSB7XG4gICAgcmV0dXJuIHN1cGVyLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGBcbkNSRUFURSBWSUVXIHNob3BpZmllZFByb21vdGlvbnNWaWV3IEFTXG4oXG5TRUxFQ1QgcHJvbW90aW9ucy5pZCBBUyBpZCwgcHJvbW90aW9ucy5jcmVhdGVkQXQgQVMgY3JlYXRlZEF0LFxuICAgICAgIHByb21vdGlvbnMudXBkYXRlZEF0IEFTIHVwZGF0ZWRBdCwgcHJvbW90aW9ucy5zaG9wSWQgQVMgc2hvcElkLFxuICAgICAgIHByb21vdGlvbnMubmFtZSBBUyBuYW1lLFxuICAgICAgIHByb21vdGlvbnMucHJvZHVjdElkIEFTIHByb2R1Y3RJZCwgcHJvbW90aW9ucy5pbWFnZUZpbGVuYW1lIEFTIGltYWdlRmlsZW5hbWUsXG4gICAgICAgc2hvcGlmaWVkUHJvZHVjdHNWaWV3Lm5hbWUgQVMgcHJvZHVjdE5hbWUsXG4gICAgICAgc2hvcGlmaWVkUHJvZHVjdHNWaWV3LnNob3BQcmljZSBBUyBwcm9kdWN0UHJpY2VcbkZST00gKFNFTEVDVCAqIEZST00gcHJvbW90aW9ucyBXSEVSRSBkZWxldGVkQVQgSVMgTlVMTCkgQVMgcHJvbW90aW9uc1xuSU5ORVIgSk9JTiBzaG9waWZpZWRQcm9kdWN0c1ZpZXcgT04gcHJvbW90aW9ucy5wcm9kdWN0SWQgPSBzaG9waWZpZWRQcm9kdWN0c1ZpZXcuaWQgQU5EIHByb21vdGlvbnMuc2hvcElkID0gc2hvcGlmaWVkUHJvZHVjdHNWaWV3LnNob3BJZFxuKTtgKVxuICB9XG5cbiAgZGVzdHJveVZpZXdzICgpIHtcbiAgICBsb2cuaW5mbyhUQUcsICdkZXN0cm95Vmlld3MoKScpXG5cbiAgICBjb25zdCB2aWV3cyA9IFsnaW5TdG9ja09yZGVyc1ZpZXcnLCAnc2hvcGlmaWVkUHJvZHVjdHNWaWV3JywgJ3Nob3BpZmllZFZhcmlhbnRzVmlldycsXG4gICAgICAnaW5TdG9ja1Byb2R1Y3RzVmlldycsICdpblN0b2NrVmFyaWFudHNWaWV3JywgJ3BvUHJvZHVjdHNWaWV3JywgJ3BvVmFyaWFudHNWaWV3JyxcbiAgICAgICdvcmRlcnNWaWV3JywgJ29yZGVyRGV0YWlsc1ZpZXcnLCAnc2hvcGlmaWVkUHJvbW90aW9uc1ZpZXcnXVxuXG4gICAgcmV0dXJuIHZpZXdzLnJlZHVjZSgoYWNjLCB2aWV3KSA9PiB7XG4gICAgICByZXR1cm4gYWNjLnRoZW4oKCkgPT4ge1xuICAgICAgICByZXR1cm5cbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIGxvZy5pbmZvKFRBRywgZXJyKVxuICAgICAgfSkuZmluYWxseSgoKSA9PiB7XG4gICAgICAgIC8vIEV2ZW4gaWYgdGhlcmUncyBhbiBlcnJvciAoaS5lLiB0aGUgdmlldyB0byBiZSBkcm9wcGVkIGRvZXNuJ3QgZXhpc3QsIHdlIHdhbnRcbiAgICAgICAgLy8gdG8gY29udGludWVcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGBEUk9QIFZJRVcgJHt2aWV3fTtgKS5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0sIFByb21pc2UucmVzb2x2ZSgpKVxuICB9XG5cbiAgcG9wdWxhdGVWaWV3cyAoKSB7XG4gICAgY29uc3QgcHJvbWlzZXM6IEFycmF5PCgpID0+IFByb21pc2U8YW55Pj4gPSBbXG4gICAgICB0aGlzLmNyZWF0ZUluU3RvY2tPcmRlcnNWaWV3LFxuICAgICAgdGhpcy5jcmVhdGVTaG9waWZpZWRQcm9kdWN0c1ZpZXcsXG4gICAgICB0aGlzLmNyZWF0ZVNob3BpZmllZFZhcmlhbnRzVmlldyxcbiAgICAgIHRoaXMuY3JlYXRlSW5TdG9ja1Byb2R1Y3RzVmlldyxcbiAgICAgIHRoaXMuY3JlYXRlSW5TdG9ja1ZhcmlhbnRzVmlldyxcbiAgICAgIHRoaXMuY3JlYXRlUE9Qcm9kdWN0c1ZpZXcsXG4gICAgICB0aGlzLmNyZWF0ZVBPVmFyaWFudHNWaWV3LFxuICAgICAgdGhpcy5jcmVhdGVPcmRlclZpZXcsXG4gICAgICB0aGlzLmNyZWF0ZU9yZGVyRGV0YWlsc1ZpZXcsXG4gICAgICB0aGlzLmNyZWF0ZVNob3BpZmllZFByb21vdGlvbnNWaWV3c1xuICAgIF1cbiAgICByZXR1cm4gdGhpcy5kZXN0cm95Vmlld3MoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICByZXR1cm4gcHJvbWlzZXMucmVkdWNlKChhY2MsIHByb21pc2UpID0+IHtcbiAgICAgICAgcmV0dXJuIGFjYy50aGVuKCgpID0+IHtcbiAgICAgICAgICByZXR1cm4gcHJvbWlzZSgpXG4gICAgICAgIH0pXG4gICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSlcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBTUUxWaWV3U2VydmljZSgpXG4iXX0=
