"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),crud_service_1=require("./crud-service"),Utils=require("../libs/utils");class ShopService extends crud_service_1.CRUDService{getShops(){return this.read("Shop",{}).then(e=>e)}getShopifiedProducts(e,t=!1,r={},i={}){return this.getSequelize().query(`SELECT * FROM shopifiedProductsView WHERE shopId = ${e}`,{type:this.getSequelize().QueryTypes.SELECT}).then(e=>e?{status:!0,data:e}:{status:!1})}getInStockProducts({pageSize:e=10,pageIndex:t=0,productId:r=null,categoryId:i=null,subCategoryId:s=null},a){if(null!==r&&!Utils.isNumber(r))return Promise.reject("productId has to be number!");if(null!==i&&!Utils.isNumber(i))return Promise.reject("categoryId has to be number!");if(null!==s&&!Utils.isNumber(s))return Promise.reject("subCategoryId has to be number!");const o=`\n      SELECT\n        inStockProductsView.id as id,\n        inStockProductsView.shopId as shopId,\n        inStockProductsView.name as name,\n        inStockProductsView.description as description,\n        inStockProductsView.warranty as warranty,\n        inStockProductsView.price as price,\n        inStockProductsView.stockQuantity as stockQuantity,\n        inStockProductsView.updatedAt as updatedAt,\n        primaryImages.imageFilename as \`primaryImage.imageFilename\`,\n        primaryImages.productId as \`primaryImage.productId\`,\n        productImages.imageFilename as \`images.imageFilename\`,\n        productImages.productId as \`images.productId\`,\n        subCategories.id as \`subCategory.id\`,\n        subCategories.name as \`subCategory.name\`,\n        subCategories.description as \`subCategory.description\`,\n        subCategories.categoryId as \`subCategory.categoryId\`,\n        subCategories.imageFilename as \`subCategory.imageFilename\`,\n        categories.id as \`subCategory.category.id\`,\n        categories.name as \`subCategory.category.name\`,\n        categories.description as \`subCategory.category.description\`,\n        inStockVariantsView.id as \`variants.id\`,\n        inStockVariantsView.shopId as \`variants.shopId\`,\n        inStockVariantsView.productId as \`variants.productId\`,\n        inStockVariantsView.name as \`variants.name\`,\n        inStockVariantsView.stockQuantity as \`variants.stockQuantity\`\n    FROM (SELECT *\n          FROM inStockProductsView\n          WHERE inStockProductsView.shopId = ${a}\n                ${r?"AND inStockProductsView.id ="+r:""}\n                ${s?" AND inStockProductsView.subCategoryId ="+s:""}\n                ${i?" AND inStockProductsView.categoryId = "+i:""}\n          LIMIT ${e*t}, ${e}\n         ) as inStockProductsView\n    LEFT OUTER JOIN productImages ON inStockProductsView.id = productImages.productId\n    LEFT OUTER JOIN\n      (SELECT * FROM productImages WHERE \`primary\` = TRUE) as primaryImages ON inStockProductsView.id = primaryImages.productId\n    INNER JOIN subCategories ON subCategories.id = inStockProductsView.subCategoryId\n    INNER JOIN categories ON subCategories.categoryId = categories.id\n    LEFT OUTER JOIN inStockVariantsView ON inStockVariantsView.productId = inStockProductsView.id AND inStockVariantsView.shopId = ${a}\n    ORDER BY inStockProductsView.id;`,n=`\n      SELECT COUNT(*) AS count\n        FROM (SELECT *\n              FROM inStockProductsView\n              WHERE inStockProductsView.shopId = ${a}\n                    ${r?"AND inStockProductsView.id ="+r:""}\n                    ${s?" AND inStockProductsView.subCategoryId ="+s:""}\n                    ${i?" AND inStockProductsView.categoryId = "+i:""}\n              ) as inStockProductsView;`;return Promise.join(this.getSequelize().query(o,{type:this.getSequelize().QueryTypes.SELECT,nest:!1}),this.getSequelize().query(n,{type:this.getSequelize().QueryTypes.SELECT,nest:!1})).spread((e,t)=>{return{status:!0,data:{products:Utils.objectify(e).map(e=>(e.subCategory=e.subCategory[0],e.subCategory.category=e.subCategory.category[0],e.primaryImage=e.primaryImage[0],e)),totalProducts:t[0].count}}})}getPOProducts({pageSize:e=10,pageIndex:t=0,productId:r=null,categoryId:i=null,subCategoryId:s=null},a){if(null!==r&&!Utils.isNumber(r))return Promise.reject("productId has to be number!");if(null!==i&&!Utils.isNumber(i))return Promise.reject("categoryId has to be number!");if(null!==s&&!Utils.isNumber(s))return Promise.reject("subCategoryId has to be number!");const o=`\n      SELECT\n        poProductsView.id as id,\n        poProductsView.shopId as shopId,\n        poProductsView.name as name,\n        poProductsView.description as description,\n        poProductsView.warranty as warranty,\n        poProductsView.price as price,\n        poProductsView.preOrderDuration as preOrderDuration,\n        poProductsView.updatedAt as updatedAt,\n        primaryImages.imageFilename as \`primaryImage.imageFilename\`,\n        primaryImages.productId as \`primaryImage.productId\`,\n        productImages.imageFilename as \`images.imageFilename\`,\n        # productImages.productId as \`images.productId\`,\n        productImages.primary as \`images.primary\`,\n        subCategories.id as \`subCategory.id\`,\n        subCategories.name as \`subCategory.name\`,\n        subCategories.description as \`subCategory.description\`,\n        subCategories.categoryId as \`subCategory.categoryId\`,\n        subCategories.imageFilename as \`subCategory.imageFilename\`,\n        categories.id as \`subCategory.category.id\`,\n        categories.name as \`subCategory.category.name\`,\n        categories.description as \`subCategory.category.description\`,\n        poVariantsView.id as \`variants.id\`,\n        poVariantsView.shopId as \`variants.shopId\`,\n        poVariantsView.productId as \`variants.productId\`,\n        poVariantsView.name as \`variants.name\`,\n        poVariantsView.supplierCount as \`variants.supplierCount\`\n      FROM (SELECT *\n        FROM poProductsView\n        WHERE poProductsView.shopId = ${a}\n              ${r?"AND poProductsView.id ="+r:""}\n              ${s?"AND poProductsView.subCategoryId ="+s:""}\n              ${i?" AND poProductsView.categoryId = "+i:""}\n        LIMIT ${e*t}, ${e}\n        ) as poProductsView\n      LEFT OUTER JOIN\n        (SELECT * FROM productImages WHERE \`primary\` = TRUE) as primaryImages ON poProductsView.id = primaryImages.productId\n      LEFT OUTER JOIN productImages on poProductsView.id = productImages.productId\n      INNER JOIN subCategories on subCategories.id = poProductsView.subCategoryId\n      INNER JOIN categories on subCategories.categoryId = categories.id\n      LEFT OUTER JOIN poVariantsView ON poVariantsView.productId = poProductsView.id AND poVariantsView.shopId = ${a}\n      ORDER BY poProductsView.id;`,n=`\n      SELECT COUNT(*) AS count FROM\n        (SELECT *\n          FROM poProductsView\n          WHERE poProductsView.shopId = ${a}\n                ${r?"AND poProductsView.id ="+r:""}\n                ${s?"AND poProductsView.subCategoryId ="+s:""}\n                ${i?" AND poProductsView.categoryId = "+i:""}\n          ) as poProductsView`;return Promise.join(this.getSequelize().query(o,{type:this.getSequelize().QueryTypes.SELECT,nest:!1}),this.getSequelize().query(n,{type:this.getSequelize().QueryTypes.SELECT})).spread((e,t)=>{return{status:!0,data:{products:Utils.objectify(e).map(e=>(e.subCategory=e.subCategory[0],e.subCategory.category=e.subCategory.category[0],e.primaryImage=e.primaryImage[0],e)),totalProducts:t[0].count}}})}getShopifiedVariants(e,t){return this.getSequelize().query(`SELECT * FROM shopifiedVariantsView WHERE shopId = ${e} AND productId =${t}`,{type:this.getSequelize().QueryTypes.SELECT}).then(e=>e?{status:!0,data:e}:{status:!1})}getShopStock(e,t={}){return this.getModels("ShopStock").findAll({where:Object.assign({},t,{shopId:e}),include:[{model:this.getModels("Variant"),include:[{model:this.getModels("Product")}]}]}).then(e=>({status:!0,data:e}))}getSupplierStock(e){return this.getModels("SupplierStock").findAll({where:{supplierId:e},include:[{model:this.getModels("Variant"),required:!0,include:[{model:this.getModels("Product"),required:!0}]}]}).then(e=>({status:!0,data:e})).catch(this.errHandler)}addSupplierStock({supplierId:e,variantId:t,price:r}){return this.create("SupplierStock",{supplierId:e,variantId:t,price:r})}getPromotion(e){return super.rawReadQuery(`SELECT * FROM shopifiedPromotionsView WHERE shopId = ${e}`)}}exports.default=new ShopService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
