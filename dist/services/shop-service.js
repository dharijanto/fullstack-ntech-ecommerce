"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),crud_service_1=require("./crud-service"),Utils=require("../libs/utils");class ShopService extends crud_service_1.CRUDService{getShops(){return this.read("Shop",{}).then(e=>e)}getShopifiedProducts(e,t=!1,r={},i={}){return this.getSequelize().query(`SELECT * FROM shopifiedProductsView WHERE shopId = ${e}`,{type:this.getSequelize().QueryTypes.SELECT}).then(e=>e?{status:!0,data:e}:{status:!1})}getInStockProducts({pageSize:e=10,pageIndex:t=0,productId:r=null,categoryId:i=null,subCategoryId:s=null},a){if(null!==r&&!Utils.isNumber(r)&&!Array.isArray(r))return Promise.reject("productId has to be number or array! "+JSON.stringify(r));if(null!==i&&!Utils.isNumber(i))return Promise.reject("categoryId has to be number!");if(null!==s&&!Utils.isNumber(s))return Promise.reject("subCategoryId has to be number!");Array.isArray(r)&&0===(r||[]).length&&(r=null);const o=`\n      SELECT\n        inStockProductsView.id as id,\n        inStockProductsView.shopId as shopId,\n        inStockProductsView.name as name,\n        inStockProductsView.description as description,\n        inStockProductsView.warranty as warranty,\n        inStockProductsView.price as price,\n        inStockProductsView.stockQuantity as stockQuantity,\n        inStockProductsView.updatedAt as updatedAt,\n        primaryImages.imageFilename as \`primaryImage.imageFilename\`,\n        primaryImages.productId as \`primaryImage.productId\`,\n        productImages.imageFilename as \`images.imageFilename\`,\n        productImages.productId as \`images.productId\`,\n        subCategories.id as \`subCategory.id\`,\n        subCategories.name as \`subCategory.name\`,\n        subCategories.description as \`subCategory.description\`,\n        subCategories.categoryId as \`subCategory.categoryId\`,\n        subCategories.imageFilename as \`subCategory.imageFilename\`,\n        categories.id as \`subCategory.category.id\`,\n        categories.name as \`subCategory.category.name\`,\n        categories.description as \`subCategory.category.description\`,\n        inStockVariantsView.id as \`variants.id\`,\n        inStockVariantsView.shopId as \`variants.shopId\`,\n        inStockVariantsView.productId as \`variants.productId\`,\n        inStockVariantsView.name as \`variants.name\`,\n        inStockVariantsView.stockQuantity as \`variants.stockQuantity\`\n    FROM (SELECT *\n          FROM inStockProductsView\n          WHERE inStockProductsView.shopId = ${a}\n                ${r&&"object"!=typeof r?"AND inStockProductsView.id ="+r:""}\n                ${r&&"object"==typeof r?"AND inStockProductsView.id IN ("+(r||[]).join(", ")+")":""}\n                ${s?" AND inStockProductsView.subCategoryId ="+s:""}\n                ${i?" AND inStockProductsView.categoryId = "+i:""}\n          LIMIT ${e*t}, ${e}\n         ) as inStockProductsView\n    LEFT OUTER JOIN productImages ON inStockProductsView.id = productImages.productId\n    LEFT OUTER JOIN\n      (SELECT * FROM productImages WHERE \`primary\` = TRUE) as primaryImages ON inStockProductsView.id = primaryImages.productId\n    INNER JOIN subCategories ON subCategories.id = inStockProductsView.subCategoryId\n    INNER JOIN categories ON subCategories.categoryId = categories.id\n    LEFT OUTER JOIN inStockVariantsView ON inStockVariantsView.productId = inStockProductsView.id AND inStockVariantsView.shopId = ${a}\n    ORDER BY inStockProductsView.id;`,n=`\n      SELECT COUNT(*) AS count\n        FROM (SELECT *\n              FROM inStockProductsView\n              WHERE inStockProductsView.shopId = ${a}\n                    ${r&&"object"!=typeof r?"AND inStockProductsView.id ="+r:""}\n                    ${r&&"object"==typeof r?"AND inStockProductsView.id IN ("+(r||[]).join(", ")+")":""}\n                    ${s?" AND inStockProductsView.subCategoryId ="+s:""}\n                    ${i?" AND inStockProductsView.categoryId = "+i:""}\n              ) as inStockProductsView;`;return Promise.join(this.getSequelize().query(o,{type:this.getSequelize().QueryTypes.SELECT,nest:!1}),this.getSequelize().query(n,{type:this.getSequelize().QueryTypes.SELECT,nest:!1})).spread((e,t)=>{return{status:!0,data:{products:Utils.objectify(e).map(e=>(e.subCategory=e.subCategory[0],e.subCategory.category=e.subCategory.category[0],e.primaryImage=e.primaryImage[0],e)),totalProducts:t[0].count}}})}getPOProducts({pageSize:e=10,pageIndex:t=0,productId:r=null,categoryId:i=null,subCategoryId:s=null},a){if(null!==r&&!Utils.isNumber(r)&&!Array.isArray(r))return Promise.reject("productId has to be number!");if(null!==i&&!Utils.isNumber(i))return Promise.reject("categoryId has to be number!");if(null!==s&&!Utils.isNumber(s))return Promise.reject("subCategoryId has to be number!");Array.isArray(r)&&0===(r||[]).length&&(r=null);const o=`\n      SELECT\n        poProductsView.id as id,\n        poProductsView.shopId as shopId,\n        poProductsView.name as name,\n        poProductsView.description as description,\n        poProductsView.warranty as warranty,\n        poProductsView.price as price,\n        poProductsView.preOrderDuration as preOrderDuration,\n        poProductsView.updatedAt as updatedAt,\n        primaryImages.imageFilename as \`primaryImage.imageFilename\`,\n        primaryImages.productId as \`primaryImage.productId\`,\n        productImages.imageFilename as \`images.imageFilename\`,\n        # productImages.productId as \`images.productId\`,\n        productImages.primary as \`images.primary\`,\n        subCategories.id as \`subCategory.id\`,\n        subCategories.name as \`subCategory.name\`,\n        subCategories.description as \`subCategory.description\`,\n        subCategories.categoryId as \`subCategory.categoryId\`,\n        subCategories.imageFilename as \`subCategory.imageFilename\`,\n        categories.id as \`subCategory.category.id\`,\n        categories.name as \`subCategory.category.name\`,\n        categories.description as \`subCategory.category.description\`,\n        poVariantsView.id as \`variants.id\`,\n        poVariantsView.shopId as \`variants.shopId\`,\n        poVariantsView.productId as \`variants.productId\`,\n        poVariantsView.name as \`variants.name\`,\n        poVariantsView.supplierCount as \`variants.supplierCount\`\n      FROM (SELECT *\n        FROM poProductsView\n        WHERE poProductsView.shopId = ${a}\n              ${r&&"object"!=typeof r?"AND poProductsView.id ="+r:""}\n              ${r&&"object"==typeof r?"AND poProductsView.id IN ("+(r||[]).join(", ")+")":""}\n              ${s?"AND poProductsView.subCategoryId ="+s:""}\n              ${i?" AND poProductsView.categoryId = "+i:""}\n        LIMIT ${e*t}, ${e}\n        ) as poProductsView\n      LEFT OUTER JOIN\n        (SELECT * FROM productImages WHERE \`primary\` = TRUE) as primaryImages ON poProductsView.id = primaryImages.productId\n      LEFT OUTER JOIN productImages on poProductsView.id = productImages.productId\n      INNER JOIN subCategories on subCategories.id = poProductsView.subCategoryId\n      INNER JOIN categories on subCategories.categoryId = categories.id\n      LEFT OUTER JOIN poVariantsView ON poVariantsView.productId = poProductsView.id AND poVariantsView.shopId = ${a}\n      ORDER BY poProductsView.id;`,n=`\n      SELECT COUNT(*) AS count FROM\n        (SELECT *\n          FROM poProductsView\n          WHERE poProductsView.shopId = ${a}\n                ${r&&"object"!=typeof r?"AND poProductsView.id ="+r:""}\n                ${r&&"object"==typeof r?"AND poProductsView.id IN ("+(r||[]).join(", ")+")":""}\n                ${s?"AND poProductsView.subCategoryId ="+s:""}\n                ${i?" AND poProductsView.categoryId = "+i:""}\n          ) as poProductsView`;return Promise.join(this.getSequelize().query(o,{type:this.getSequelize().QueryTypes.SELECT,nest:!1}),this.getSequelize().query(n,{type:this.getSequelize().QueryTypes.SELECT})).spread((e,t)=>{return{status:!0,data:{products:Utils.objectify(e).map(e=>(e.subCategory=e.subCategory[0],e.subCategory.category=e.subCategory.category[0],e.primaryImage=e.primaryImage[0],e)),totalProducts:t[0].count}}})}getShopifiedVariants(e,t){return this.getSequelize().query(`SELECT * FROM shopifiedVariantsView WHERE shopId = ${e} AND productId =${t}`,{type:this.getSequelize().QueryTypes.SELECT}).then(e=>e?{status:!0,data:e}:{status:!1})}getShopStock(e,t={}){return this.getModels("ShopStock").findAll({where:Object.assign({},t,{shopId:e}),include:[{model:this.getModels("Variant"),include:[{model:this.getModels("Product")}]}]}).then(e=>({status:!0,data:e}))}getProductsWithSuppliersCount(){return super.rawReadQuery("\n      SELECT products.id id, products.name name,\n              products.price price, MAX(variants.createdAt) createdAt,\n              MAX(variants.updatedAt) updatedAt, COUNT(supplierStocks.id) suppliersCount\n      FROM products\n      INNER JOIN variants ON variants.productId = products.id AND variants.deletedAt IS NULL\n      LEFT OUTER JOIN supplierStocks ON supplierStocks.variantId = variants.id AND supplierStocks.deletedAt IS NULL\n      WHERE products.deletedAt IS NULL\n      GROUP BY products.id, products.name, products.price\n    ")}getVariantsWithSupplierCount(e){return e?super.rawReadQuery(`\n        SELECT variants.productId productId, variants.id id, variants.name name,\n               MAX(variants.createdAt) createdAt,\n               MAX(variants.updatedAt) updatedAt, COUNT(supplierStocks.id) suppliersCount\n        FROM variants\n        LEFT OUTER JOIN supplierStocks ON supplierStocks.variantId = variants.id AND supplierStocks.deletedAt IS NULL\n        WHERE variants.deletedAt IS NULL AND variants.productId = ${e}\n        GROUP BY variants.productId, variants.id, variants.name\n      `):Promise.reject({status:!1,errMessage:"productId is required!"})}getSupplierStock(e){return this.rawReadQuery("\n      SELECT * FROM supplierStocksView\n    ")}addSupplierStock({supplierId:e,variantId:t,price:r}){return this.create("SupplierStock",{supplierId:e,variantId:t,price:r})}getPromotion(e){return super.rawReadQuery(`SELECT * FROM shopifiedPromotionsView WHERE shopId = ${e}`)}}exports.default=new ShopService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZXJ2aWNlcy9zaG9wLXNlcnZpY2UudHMiXSwibmFtZXMiOlsiUHJvbWlzZSIsInJlcXVpcmUiLCJjcnVkX3NlcnZpY2VfMSIsIlV0aWxzIiwiU2hvcFNlcnZpY2UiLCJDUlVEU2VydmljZSIsIltvYmplY3QgT2JqZWN0XSIsInRoaXMiLCJyZWFkIiwidGhlbiIsInJlc3AiLCJzaG9wSWQiLCJwcmltYXJ5SW1hZ2VzT25seSIsInByb2R1Y3RTZWFyY2hDbGF1c2UiLCJjYXRlZ29yeVNlYXJjaENsYXVzZSIsImdldFNlcXVlbGl6ZSIsInF1ZXJ5IiwidHlwZSIsIlF1ZXJ5VHlwZXMiLCJTRUxFQ1QiLCJyZXN1bHQiLCJzdGF0dXMiLCJkYXRhIiwicGFnZVNpemUiLCJwYWdlSW5kZXgiLCJwcm9kdWN0SWQiLCJjYXRlZ29yeUlkIiwic3ViQ2F0ZWdvcnlJZCIsImlzTnVtYmVyIiwiQXJyYXkiLCJpc0FycmF5IiwicmVqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsImxlbmd0aCIsImdldFF1ZXJ5Iiwiam9pbiIsImNvdW50UXVlcnkiLCJuZXN0Iiwic3ByZWFkIiwiZmxhdHRlbmVkUHJvZHVjdHMiLCJjb3VudERhdGEiLCJwcm9kdWN0cyIsIm9iamVjdGlmeSIsIm1hcCIsInByb2R1Y3QiLCJzdWJDYXRlZ29yeSIsImNhdGVnb3J5IiwicHJpbWFyeUltYWdlIiwidG90YWxQcm9kdWN0cyIsImNvdW50Iiwic2VhcmNoQ2xhdXNlIiwiZ2V0TW9kZWxzIiwiZmluZEFsbCIsIndoZXJlIiwiT2JqZWN0IiwiYXNzaWduIiwiaW5jbHVkZSIsIm1vZGVsIiwic3VwZXIiLCJyYXdSZWFkUXVlcnkiLCJlcnJNZXNzYWdlIiwic3VwcGxpZXJJZCIsInZhcmlhbnRJZCIsInByaWNlIiwiY3JlYXRlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJvRUFHQSxNQUFBQSxRQUFBQyxRQUFBLFlBRUFDLGVBQUFELFFBQUEsa0JBRUFFLE1BQUFGLFFBQUEs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QUFXTCxHQUFnQnhDLE9BQUFBLElBQ3pDOEMsVUFFSUMsTUFBT25ELEtBQUs2QyxVQUFVLFdBQ3RCSyxVQUVJQyxNQUFPbkQsS0FBSzZDLFVBQVUsaUJBSzdCM0MsS0FBS2EsS0FDR0QsUUFBUSxFQUFNQyxLQUFBQSxLQUszQmhCLGdDQUNFLE9BQU9xRCxNQUFNQyxhQUFhLHlpQkFZNUJ0RCw2QkFBOEJtQixHQUM1QixPQUFLQSxFQUdJa0MsTUFBTUMsa2NBTWlEbkMsOEVBUnZEekIsUUFBUStCLFFBQVNWLFFBQVEsRUFBT3dDLFdBQVksMkJBY3ZEdkQsaUJBQWtCd0QsR0FDaEIsT0FBT3ZELEtBQUtxRCxhQUFhLGtEQUszQnRELGtCQUFrQndELFdBQUVBLEVBQVVDLFVBQUVBLEVBQVNDLE1BQUVBLElBQ3pDLE9BQU96RCxLQUFLMEQsT0FBc0IsaUJBQ2hDSCxXQUFBQSxFQUNBQyxVQUFBQSxFQUNBQyxNQUFBQSxJQUtKMUQsYUFBY0ssR0FDWixPQUFPZ0QsTUFBTUMscUVBQXFFakQsTUFJdEZ1RCxRQUFBQyxRQUFlLElBQUkvRCIsImZpbGUiOiJzZXJ2aWNlcy9zaG9wLXNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB1dGlsIGZyb20gJ3V0aWwnXG5cbmltcG9ydCB7IE1vZGVsLCBJbnN0YW5jZSwgT3AgfSBmcm9tICdzZXF1ZWxpemUnXG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gJ2JsdWViaXJkJ1xuXG5pbXBvcnQgeyBDUlVEU2VydmljZSB9IGZyb20gJy4vY3J1ZC1zZXJ2aWNlJ1xuaW1wb3J0IEFwcENvbmZpZyBmcm9tICcuLi9hcHAtY29uZmlnJ1xuaW1wb3J0ICogYXMgVXRpbHMgZnJvbSAnLi4vbGlicy91dGlscydcblxuLypcbiAgVGhpcyBpcyB1c2VkIHRvIGRvIHNob3AgbWFuYWdlbWVudC5cbiAgRm9yIGV4YW1wbGUsIHRvIGN1c3RvbWl6ZSBwcmljZSBmb3IgcHJvZHVjdFxuKi9cbmNsYXNzIFNob3BTZXJ2aWNlIGV4dGVuZHMgQ1JVRFNlcnZpY2Uge1xuICAvKlxuICAgIFJldHVybiBwcm9kdWN0IGpvaW5lZCB3aXRoIHNob3BQcm9kdWN0IG1ldGEgaW5mb3JtYXRpb24uXG4gICAgSWYgc2hvcFByb2R1Y3QgaXMgbm90IGRlZmluZWQsIGFwcGVuZCBtZXRhIGluZm9ybWF0aW9uOlxuICAgIHtcbiAgICAgIGlkOiBudWxsLFxuICAgICAgcHJpY2U6IHByb2R1Y3QucHJpY2UsXG4gICAgICBwcmVPcmRlcjogdHJ1ZSxcbiAgICAgIHBvTGVuZ3RoOiAzIGRheXMsXG4gICAgICBkaXNhYmxlOiBmYWxzZVxuICAgIH1cbiAgKi9cblxuICBnZXRTaG9wcyAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZDxTaG9wPignU2hvcCcsIHt9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgcmV0dXJuIHJlc3BcbiAgICB9KVxuICB9XG5cbiAgLy8gVE9ETzogV2Ugc2hvdWxkIGNyZWF0ZSB0ZXN0IGNhc2VzIHRvIGVuc3VyZSB0aGlzIGlzIGNvcnJlY3QuLi5cbiAgLy8gaS5lLiB3aGVuIHRoZXJlIGFyZSBzdXBwbGllcnMsIHN1cHBsaWVyIGNvdW50IGlzIGNvcnJlY3RcbiAgLy8gICAgICB3aGVuIHRoZXJlIGFyZSBzaG9wU3RvY2tzLCB0aGUgY291bnQgaXMgY29ycmVjdFxuICBnZXRTaG9waWZpZWRQcm9kdWN0cyAoc2hvcElkLCBwcmltYXJ5SW1hZ2VzT25seSA9IGZhbHNlLCBwcm9kdWN0U2VhcmNoQ2xhdXNlID0ge30sIGNhdGVnb3J5U2VhcmNoQ2xhdXNlID0ge30pOiBQcm9taXNlPE5DUmVzcG9uc2U8U2hvcGlmaWVkUHJvZHVjdFtdPj4ge1xuICAgIHJldHVybiB0aGlzLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGBTRUxFQ1QgKiBGUk9NIHNob3BpZmllZFByb2R1Y3RzVmlldyBXSEVSRSBzaG9wSWQgPSAke3Nob3BJZH1gLFxuICAgICAgeyB0eXBlOiB0aGlzLmdldFNlcXVlbGl6ZSgpLlF1ZXJ5VHlwZXMuU0VMRUNUIH0pLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgZGF0YTogcmVzdWx0IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IGZhbHNlIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgfVxuXG4gIC8qXG4gICAgcHJvZHVjdElkOiB1bmRlZmluZWQgLT4gZGlzcmVnYXJkIGl0XG4gICAgICAgICAgICAgICBudW1iZXIvc3RyaW5nIC0+IHNpbmdsZSBwcm9kdWN0XG4gICAgICAgICAgICAgICBhcnJheSAtPiBwcm9kdWN0cyB3aXRoIG1hdGNoaW5nIGlkc1xuICAgKi9cbiAgZ2V0SW5TdG9ja1Byb2R1Y3RzICh7IHBhZ2VTaXplID0gMTAsIHBhZ2VJbmRleCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0SWQgPSBudWxsLCBjYXRlZ29yeUlkID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YkNhdGVnb3J5SWQgPSBudWxsIH0sIHNob3BJZCk6IFByb21pc2U8TkNSZXNwb25zZTx7IHByb2R1Y3RzOiBJblN0b2NrUHJvZHVjdFtdLCB0b3RhbFByb2R1Y3RzOiBudW1iZXIgfT4+IHtcbiAgICBpZiAocHJvZHVjdElkICE9PSBudWxsICYmICEoVXRpbHMuaXNOdW1iZXIocHJvZHVjdElkKSB8fCBBcnJheS5pc0FycmF5KHByb2R1Y3RJZCkpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ3Byb2R1Y3RJZCBoYXMgdG8gYmUgbnVtYmVyIG9yIGFycmF5ISAnICsgSlNPTi5zdHJpbmdpZnkocHJvZHVjdElkKSlcbiAgICB9IGVsc2UgaWYgKGNhdGVnb3J5SWQgIT09IG51bGwgJiYgIVV0aWxzLmlzTnVtYmVyKGNhdGVnb3J5SWQpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ2NhdGVnb3J5SWQgaGFzIHRvIGJlIG51bWJlciEnKVxuICAgIH0gZWxzZSBpZiAoc3ViQ2F0ZWdvcnlJZCAhPT0gbnVsbCAmJiAhVXRpbHMuaXNOdW1iZXIoc3ViQ2F0ZWdvcnlJZCkpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnc3ViQ2F0ZWdvcnlJZCBoYXMgdG8gYmUgbnVtYmVyIScpXG4gICAgfVxuXG4gICAgLy8gV2hlbiBwcm9kdWN0SWQgaXMgZW1wdHkgYXJyYXksIHdlIGNhbid0IHBhc3MgaXQgdG8gU1FMXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvZHVjdElkKSAmJiAocHJvZHVjdElkIHx8IFtdKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHByb2R1Y3RJZCA9IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBnZXRRdWVyeSA9IGBcbiAgICAgIFNFTEVDVFxuICAgICAgICBpblN0b2NrUHJvZHVjdHNWaWV3LmlkIGFzIGlkLFxuICAgICAgICBpblN0b2NrUHJvZHVjdHNWaWV3LnNob3BJZCBhcyBzaG9wSWQsXG4gICAgICAgIGluU3RvY2tQcm9kdWN0c1ZpZXcubmFtZSBhcyBuYW1lLFxuICAgICAgICBpblN0b2NrUHJvZHVjdHNWaWV3LmRlc2NyaXB0aW9uIGFzIGRlc2NyaXB0aW9uLFxuICAgICAgICBpblN0b2NrUHJvZHVjdHNWaWV3LndhcnJhbnR5IGFzIHdhcnJhbnR5LFxuICAgICAgICBpblN0b2NrUHJvZHVjdHNWaWV3LnByaWNlIGFzIHByaWNlLFxuICAgICAgICBpblN0b2NrUHJvZHVjdHNWaWV3LnN0b2NrUXVhbnRpdHkgYXMgc3RvY2tRdWFudGl0eSxcbiAgICAgICAgaW5TdG9ja1Byb2R1Y3RzVmlldy51cGRhdGVkQXQgYXMgdXBkYXRlZEF0LFxuICAgICAgICBwcmltYXJ5SW1hZ2VzLmltYWdlRmlsZW5hbWUgYXMgXFxgcHJpbWFyeUltYWdlLmltYWdlRmlsZW5hbWVcXGAsXG4gICAgICAgIHByaW1hcnlJbWFnZXMucHJvZHVjdElkIGFzIFxcYHByaW1hcnlJbWFnZS5wcm9kdWN0SWRcXGAsXG4gICAgICAgIHByb2R1Y3RJbWFnZXMuaW1hZ2VGaWxlbmFtZSBhcyBcXGBpbWFnZXMuaW1hZ2VGaWxlbmFtZVxcYCxcbiAgICAgICAgcHJvZHVjdEltYWdlcy5wcm9kdWN0SWQgYXMgXFxgaW1hZ2VzLnByb2R1Y3RJZFxcYCxcbiAgICAgICAgc3ViQ2F0ZWdvcmllcy5pZCBhcyBcXGBzdWJDYXRlZ29yeS5pZFxcYCxcbiAgICAgICAgc3ViQ2F0ZWdvcmllcy5uYW1lIGFzIFxcYHN1YkNhdGVnb3J5Lm5hbWVcXGAsXG4gICAgICAgIHN1YkNhdGVnb3JpZXMuZGVzY3JpcHRpb24gYXMgXFxgc3ViQ2F0ZWdvcnkuZGVzY3JpcHRpb25cXGAsXG4gICAgICAgIHN1YkNhdGVnb3JpZXMuY2F0ZWdvcnlJZCBhcyBcXGBzdWJDYXRlZ29yeS5jYXRlZ29yeUlkXFxgLFxuICAgICAgICBzdWJDYXRlZ29yaWVzLmltYWdlRmlsZW5hbWUgYXMgXFxgc3ViQ2F0ZWdvcnkuaW1hZ2VGaWxlbmFtZVxcYCxcbiAgICAgICAgY2F0ZWdvcmllcy5pZCBhcyBcXGBzdWJDYXRlZ29yeS5jYXRlZ29yeS5pZFxcYCxcbiAgICAgICAgY2F0ZWdvcmllcy5uYW1lIGFzIFxcYHN1YkNhdGVnb3J5LmNhdGVnb3J5Lm5hbWVcXGAsXG4gICAgICAgIGNhdGVnb3JpZXMuZGVzY3JpcHRpb24gYXMgXFxgc3ViQ2F0ZWdvcnkuY2F0ZWdvcnkuZGVzY3JpcHRpb25cXGAsXG4gICAgICAgIGluU3RvY2tWYXJpYW50c1ZpZXcuaWQgYXMgXFxgdmFyaWFudHMuaWRcXGAsXG4gICAgICAgIGluU3RvY2tWYXJpYW50c1ZpZXcuc2hvcElkIGFzIFxcYHZhcmlhbnRzLnNob3BJZFxcYCxcbiAgICAgICAgaW5TdG9ja1ZhcmlhbnRzVmlldy5wcm9kdWN0SWQgYXMgXFxgdmFyaWFudHMucHJvZHVjdElkXFxgLFxuICAgICAgICBpblN0b2NrVmFyaWFudHNWaWV3Lm5hbWUgYXMgXFxgdmFyaWFudHMubmFtZVxcYCxcbiAgICAgICAgaW5TdG9ja1ZhcmlhbnRzVmlldy5zdG9ja1F1YW50aXR5IGFzIFxcYHZhcmlhbnRzLnN0b2NrUXVhbnRpdHlcXGBcbiAgICBGUk9NIChTRUxFQ1QgKlxuICAgICAgICAgIEZST00gaW5TdG9ja1Byb2R1Y3RzVmlld1xuICAgICAgICAgIFdIRVJFIGluU3RvY2tQcm9kdWN0c1ZpZXcuc2hvcElkID0gJHtzaG9wSWR9XG4gICAgICAgICAgICAgICAgJHtwcm9kdWN0SWQgJiYgdHlwZW9mIHByb2R1Y3RJZCAhPT0gJ29iamVjdCcgPyAnQU5EIGluU3RvY2tQcm9kdWN0c1ZpZXcuaWQgPScgKyBwcm9kdWN0SWQgOiAnJ31cbiAgICAgICAgICAgICAgICAke3Byb2R1Y3RJZCAmJiB0eXBlb2YgcHJvZHVjdElkID09PSAnb2JqZWN0JyA/ICdBTkQgaW5TdG9ja1Byb2R1Y3RzVmlldy5pZCBJTiAoJyArIChwcm9kdWN0SWQgfHwgW10pLmpvaW4oJywgJykgKyAnKScgOiAnJ31cbiAgICAgICAgICAgICAgICAke3N1YkNhdGVnb3J5SWQgPyAnIEFORCBpblN0b2NrUHJvZHVjdHNWaWV3LnN1YkNhdGVnb3J5SWQgPScgKyBzdWJDYXRlZ29yeUlkIDogJyd9XG4gICAgICAgICAgICAgICAgJHtjYXRlZ29yeUlkID8gJyBBTkQgaW5TdG9ja1Byb2R1Y3RzVmlldy5jYXRlZ29yeUlkID0gJyArIGNhdGVnb3J5SWQgOiAnJyB9XG4gICAgICAgICAgTElNSVQgJHtwYWdlU2l6ZSAqIHBhZ2VJbmRleH0sICR7cGFnZVNpemV9XG4gICAgICAgICApIGFzIGluU3RvY2tQcm9kdWN0c1ZpZXdcbiAgICBMRUZUIE9VVEVSIEpPSU4gcHJvZHVjdEltYWdlcyBPTiBpblN0b2NrUHJvZHVjdHNWaWV3LmlkID0gcHJvZHVjdEltYWdlcy5wcm9kdWN0SWRcbiAgICBMRUZUIE9VVEVSIEpPSU5cbiAgICAgIChTRUxFQ1QgKiBGUk9NIHByb2R1Y3RJbWFnZXMgV0hFUkUgXFxgcHJpbWFyeVxcYCA9IFRSVUUpIGFzIHByaW1hcnlJbWFnZXMgT04gaW5TdG9ja1Byb2R1Y3RzVmlldy5pZCA9IHByaW1hcnlJbWFnZXMucHJvZHVjdElkXG4gICAgSU5ORVIgSk9JTiBzdWJDYXRlZ29yaWVzIE9OIHN1YkNhdGVnb3JpZXMuaWQgPSBpblN0b2NrUHJvZHVjdHNWaWV3LnN1YkNhdGVnb3J5SWRcbiAgICBJTk5FUiBKT0lOIGNhdGVnb3JpZXMgT04gc3ViQ2F0ZWdvcmllcy5jYXRlZ29yeUlkID0gY2F0ZWdvcmllcy5pZFxuICAgIExFRlQgT1VURVIgSk9JTiBpblN0b2NrVmFyaWFudHNWaWV3IE9OIGluU3RvY2tWYXJpYW50c1ZpZXcucHJvZHVjdElkID0gaW5TdG9ja1Byb2R1Y3RzVmlldy5pZCBBTkQgaW5TdG9ja1ZhcmlhbnRzVmlldy5zaG9wSWQgPSAke3Nob3BJZH1cbiAgICBPUkRFUiBCWSBpblN0b2NrUHJvZHVjdHNWaWV3LmlkO2BcblxuICAgIGNvbnN0IGNvdW50UXVlcnkgPSBgXG4gICAgICBTRUxFQ1QgQ09VTlQoKikgQVMgY291bnRcbiAgICAgICAgRlJPTSAoU0VMRUNUICpcbiAgICAgICAgICAgICAgRlJPTSBpblN0b2NrUHJvZHVjdHNWaWV3XG4gICAgICAgICAgICAgIFdIRVJFIGluU3RvY2tQcm9kdWN0c1ZpZXcuc2hvcElkID0gJHtzaG9wSWR9XG4gICAgICAgICAgICAgICAgICAgICR7cHJvZHVjdElkICYmIHR5cGVvZiBwcm9kdWN0SWQgIT09ICdvYmplY3QnID8gJ0FORCBpblN0b2NrUHJvZHVjdHNWaWV3LmlkID0nICsgcHJvZHVjdElkIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICR7cHJvZHVjdElkICYmIHR5cGVvZiBwcm9kdWN0SWQgPT09ICdvYmplY3QnID8gJ0FORCBpblN0b2NrUHJvZHVjdHNWaWV3LmlkIElOICgnICsgKHByb2R1Y3RJZCB8fCBbXSkuam9pbignLCAnKSArICcpJyA6ICcnfVxuICAgICAgICAgICAgICAgICAgICAke3N1YkNhdGVnb3J5SWQgPyAnIEFORCBpblN0b2NrUHJvZHVjdHNWaWV3LnN1YkNhdGVnb3J5SWQgPScgKyBzdWJDYXRlZ29yeUlkIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICR7Y2F0ZWdvcnlJZCA/ICcgQU5EIGluU3RvY2tQcm9kdWN0c1ZpZXcuY2F0ZWdvcnlJZCA9ICcgKyBjYXRlZ29yeUlkIDogJycgfVxuICAgICAgICAgICAgICApIGFzIGluU3RvY2tQcm9kdWN0c1ZpZXc7YFxuXG4gICAgcmV0dXJuIFByb21pc2Uuam9pbihcbiAgICAgIHRoaXMuZ2V0U2VxdWVsaXplKCkucXVlcnkoZ2V0UXVlcnksIHsgdHlwZTogdGhpcy5nZXRTZXF1ZWxpemUoKS5RdWVyeVR5cGVzLlNFTEVDVCwgbmVzdDogZmFsc2UgfSksXG4gICAgICB0aGlzLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGNvdW50UXVlcnksIHsgdHlwZTogdGhpcy5nZXRTZXF1ZWxpemUoKS5RdWVyeVR5cGVzLlNFTEVDVCwgbmVzdDogZmFsc2UgfSlcbiAgICApLnNwcmVhZCgoZmxhdHRlbmVkUHJvZHVjdHMsIGNvdW50RGF0YSkgPT4ge1xuICAgICAgY29uc3QgcHJvZHVjdHMgPSBVdGlscy5vYmplY3RpZnkoZmxhdHRlbmVkUHJvZHVjdHMpLm1hcChwcm9kdWN0ID0+IHtcbiAgICAgICAgcHJvZHVjdC5zdWJDYXRlZ29yeSA9IHByb2R1Y3Quc3ViQ2F0ZWdvcnlbMF1cbiAgICAgICAgcHJvZHVjdC5zdWJDYXRlZ29yeS5jYXRlZ29yeSA9IHByb2R1Y3Quc3ViQ2F0ZWdvcnkuY2F0ZWdvcnlbMF1cbiAgICAgICAgcHJvZHVjdC5wcmltYXJ5SW1hZ2UgPSBwcm9kdWN0LnByaW1hcnlJbWFnZVswXVxuICAgICAgICByZXR1cm4gcHJvZHVjdFxuICAgICAgfSlcbiAgICAgIGNvbnN0IHRvdGFsUHJvZHVjdHMgPSBjb3VudERhdGFbMF0uY291bnRcbiAgICAgIHJldHVybiB7IHN0YXR1czogdHJ1ZSwgZGF0YTogeyBwcm9kdWN0cywgdG90YWxQcm9kdWN0cyB9IH1cbiAgICB9KVxuICB9XG5cbiAgLy8gVE9ETzogTGltaXQgc2hvdWxkIGJlIGRvbmUgb24gdGhlIGZpbmFsIHF1ZXJpZXMuIFNvbHV0aW9uIGlzIHRvIGFkZCBjYXRlZ29yeUlkIG9uIFNRTCB2aWV3XG4gIGdldFBPUHJvZHVjdHMgKHsgcGFnZVNpemUgPSAxMCwgcGFnZUluZGV4ID0gMCxcbiAgICAgICAgICAgICAgICAgIHByb2R1Y3RJZCA9IG51bGwsIGNhdGVnb3J5SWQgPSBudWxsLFxuICAgICAgICAgICAgICAgICAgc3ViQ2F0ZWdvcnlJZCA9IG51bGwgfSwgc2hvcElkKTogUHJvbWlzZTxOQ1Jlc3BvbnNlPHsgcHJvZHVjdHM6IFBPUHJvZHVjdFtdLCB0b3RhbFByb2R1Y3RzOiBudW1iZXIgfT4+IHtcbiAgICBpZiAocHJvZHVjdElkICE9PSBudWxsICYmICEoVXRpbHMuaXNOdW1iZXIocHJvZHVjdElkKSB8fCBBcnJheS5pc0FycmF5KHByb2R1Y3RJZCkpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ3Byb2R1Y3RJZCBoYXMgdG8gYmUgbnVtYmVyIScpXG4gICAgfSBlbHNlIGlmIChjYXRlZ29yeUlkICE9PSBudWxsICYmICFVdGlscy5pc051bWJlcihjYXRlZ29yeUlkKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdjYXRlZ29yeUlkIGhhcyB0byBiZSBudW1iZXIhJylcbiAgICB9IGVsc2UgaWYgKHN1YkNhdGVnb3J5SWQgIT09IG51bGwgJiYgIVV0aWxzLmlzTnVtYmVyKHN1YkNhdGVnb3J5SWQpKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ3N1YkNhdGVnb3J5SWQgaGFzIHRvIGJlIG51bWJlciEnKVxuICAgIH1cblxuICAgIC8vIFdoZW4gcHJvZHVjdElkIGlzIGVtcHR5IGFycmF5LCB3ZSBjYW4ndCBwYXNzIGl0IHRvIFNRTFxuICAgIGlmIChBcnJheS5pc0FycmF5KHByb2R1Y3RJZCkgJiYgKHByb2R1Y3RJZCB8fCBbXSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBwcm9kdWN0SWQgPSBudWxsXG4gICAgfVxuXG4gICAgY29uc3QgZ2V0UXVlcnkgPSBgXG4gICAgICBTRUxFQ1RcbiAgICAgICAgcG9Qcm9kdWN0c1ZpZXcuaWQgYXMgaWQsXG4gICAgICAgIHBvUHJvZHVjdHNWaWV3LnNob3BJZCBhcyBzaG9wSWQsXG4gICAgICAgIHBvUHJvZHVjdHNWaWV3Lm5hbWUgYXMgbmFtZSxcbiAgICAgICAgcG9Qcm9kdWN0c1ZpZXcuZGVzY3JpcHRpb24gYXMgZGVzY3JpcHRpb24sXG4gICAgICAgIHBvUHJvZHVjdHNWaWV3LndhcnJhbnR5IGFzIHdhcnJhbnR5LFxuICAgICAgICBwb1Byb2R1Y3RzVmlldy5wcmljZSBhcyBwcmljZSxcbiAgICAgICAgcG9Qcm9kdWN0c1ZpZXcucHJlT3JkZXJEdXJhdGlvbiBhcyBwcmVPcmRlckR1cmF0aW9uLFxuICAgICAgICBwb1Byb2R1Y3RzVmlldy51cGRhdGVkQXQgYXMgdXBkYXRlZEF0LFxuICAgICAgICBwcmltYXJ5SW1hZ2VzLmltYWdlRmlsZW5hbWUgYXMgXFxgcHJpbWFyeUltYWdlLmltYWdlRmlsZW5hbWVcXGAsXG4gICAgICAgIHByaW1hcnlJbWFnZXMucHJvZHVjdElkIGFzIFxcYHByaW1hcnlJbWFnZS5wcm9kdWN0SWRcXGAsXG4gICAgICAgIHByb2R1Y3RJbWFnZXMuaW1hZ2VGaWxlbmFtZSBhcyBcXGBpbWFnZXMuaW1hZ2VGaWxlbmFtZVxcYCxcbiAgICAgICAgIyBwcm9kdWN0SW1hZ2VzLnByb2R1Y3RJZCBhcyBcXGBpbWFnZXMucHJvZHVjdElkXFxgLFxuICAgICAgICBwcm9kdWN0SW1hZ2VzLnByaW1hcnkgYXMgXFxgaW1hZ2VzLnByaW1hcnlcXGAsXG4gICAgICAgIHN1YkNhdGVnb3JpZXMuaWQgYXMgXFxgc3ViQ2F0ZWdvcnkuaWRcXGAsXG4gICAgICAgIHN1YkNhdGVnb3JpZXMubmFtZSBhcyBcXGBzdWJDYXRlZ29yeS5uYW1lXFxgLFxuICAgICAgICBzdWJDYXRlZ29yaWVzLmRlc2NyaXB0aW9uIGFzIFxcYHN1YkNhdGVnb3J5LmRlc2NyaXB0aW9uXFxgLFxuICAgICAgICBzdWJDYXRlZ29yaWVzLmNhdGVnb3J5SWQgYXMgXFxgc3ViQ2F0ZWdvcnkuY2F0ZWdvcnlJZFxcYCxcbiAgICAgICAgc3ViQ2F0ZWdvcmllcy5pbWFnZUZpbGVuYW1lIGFzIFxcYHN1YkNhdGVnb3J5LmltYWdlRmlsZW5hbWVcXGAsXG4gICAgICAgIGNhdGVnb3JpZXMuaWQgYXMgXFxgc3ViQ2F0ZWdvcnkuY2F0ZWdvcnkuaWRcXGAsXG4gICAgICAgIGNhdGVnb3JpZXMubmFtZSBhcyBcXGBzdWJDYXRlZ29yeS5jYXRlZ29yeS5uYW1lXFxgLFxuICAgICAgICBjYXRlZ29yaWVzLmRlc2NyaXB0aW9uIGFzIFxcYHN1YkNhdGVnb3J5LmNhdGVnb3J5LmRlc2NyaXB0aW9uXFxgLFxuICAgICAgICBwb1ZhcmlhbnRzVmlldy5pZCBhcyBcXGB2YXJpYW50cy5pZFxcYCxcbiAgICAgICAgcG9WYXJpYW50c1ZpZXcuc2hvcElkIGFzIFxcYHZhcmlhbnRzLnNob3BJZFxcYCxcbiAgICAgICAgcG9WYXJpYW50c1ZpZXcucHJvZHVjdElkIGFzIFxcYHZhcmlhbnRzLnByb2R1Y3RJZFxcYCxcbiAgICAgICAgcG9WYXJpYW50c1ZpZXcubmFtZSBhcyBcXGB2YXJpYW50cy5uYW1lXFxgLFxuICAgICAgICBwb1ZhcmlhbnRzVmlldy5zdXBwbGllckNvdW50IGFzIFxcYHZhcmlhbnRzLnN1cHBsaWVyQ291bnRcXGBcbiAgICAgIEZST00gKFNFTEVDVCAqXG4gICAgICAgIEZST00gcG9Qcm9kdWN0c1ZpZXdcbiAgICAgICAgV0hFUkUgcG9Qcm9kdWN0c1ZpZXcuc2hvcElkID0gJHtzaG9wSWR9XG4gICAgICAgICAgICAgICR7cHJvZHVjdElkICYmIHR5cGVvZiBwcm9kdWN0SWQgIT09ICdvYmplY3QnID8gJ0FORCBwb1Byb2R1Y3RzVmlldy5pZCA9JyArIHByb2R1Y3RJZCA6ICcnfVxuICAgICAgICAgICAgICAke3Byb2R1Y3RJZCAmJiB0eXBlb2YgcHJvZHVjdElkID09PSAnb2JqZWN0JyA/ICdBTkQgcG9Qcm9kdWN0c1ZpZXcuaWQgSU4gKCcgKyAocHJvZHVjdElkIHx8IFtdKS5qb2luKCcsICcpICsgJyknIDogJyd9XG4gICAgICAgICAgICAgICR7c3ViQ2F0ZWdvcnlJZCA/ICdBTkQgcG9Qcm9kdWN0c1ZpZXcuc3ViQ2F0ZWdvcnlJZCA9JyArIHN1YkNhdGVnb3J5SWQgOiAnJ31cbiAgICAgICAgICAgICAgJHtjYXRlZ29yeUlkID8gJyBBTkQgcG9Qcm9kdWN0c1ZpZXcuY2F0ZWdvcnlJZCA9ICcgKyBjYXRlZ29yeUlkIDogJycgfVxuICAgICAgICBMSU1JVCAke3BhZ2VTaXplICogcGFnZUluZGV4fSwgJHtwYWdlU2l6ZX1cbiAgICAgICAgKSBhcyBwb1Byb2R1Y3RzVmlld1xuICAgICAgTEVGVCBPVVRFUiBKT0lOXG4gICAgICAgIChTRUxFQ1QgKiBGUk9NIHByb2R1Y3RJbWFnZXMgV0hFUkUgXFxgcHJpbWFyeVxcYCA9IFRSVUUpIGFzIHByaW1hcnlJbWFnZXMgT04gcG9Qcm9kdWN0c1ZpZXcuaWQgPSBwcmltYXJ5SW1hZ2VzLnByb2R1Y3RJZFxuICAgICAgTEVGVCBPVVRFUiBKT0lOIHByb2R1Y3RJbWFnZXMgb24gcG9Qcm9kdWN0c1ZpZXcuaWQgPSBwcm9kdWN0SW1hZ2VzLnByb2R1Y3RJZFxuICAgICAgSU5ORVIgSk9JTiBzdWJDYXRlZ29yaWVzIG9uIHN1YkNhdGVnb3JpZXMuaWQgPSBwb1Byb2R1Y3RzVmlldy5zdWJDYXRlZ29yeUlkXG4gICAgICBJTk5FUiBKT0lOIGNhdGVnb3JpZXMgb24gc3ViQ2F0ZWdvcmllcy5jYXRlZ29yeUlkID0gY2F0ZWdvcmllcy5pZFxuICAgICAgTEVGVCBPVVRFUiBKT0lOIHBvVmFyaWFudHNWaWV3IE9OIHBvVmFyaWFudHNWaWV3LnByb2R1Y3RJZCA9IHBvUHJvZHVjdHNWaWV3LmlkIEFORCBwb1ZhcmlhbnRzVmlldy5zaG9wSWQgPSAke3Nob3BJZH1cbiAgICAgIE9SREVSIEJZIHBvUHJvZHVjdHNWaWV3LmlkO2BcblxuICAgIGNvbnN0IGNvdW50UXVlcnkgPSBgXG4gICAgICBTRUxFQ1QgQ09VTlQoKikgQVMgY291bnQgRlJPTVxuICAgICAgICAoU0VMRUNUICpcbiAgICAgICAgICBGUk9NIHBvUHJvZHVjdHNWaWV3XG4gICAgICAgICAgV0hFUkUgcG9Qcm9kdWN0c1ZpZXcuc2hvcElkID0gJHtzaG9wSWR9XG4gICAgICAgICAgICAgICAgJHtwcm9kdWN0SWQgJiYgdHlwZW9mIHByb2R1Y3RJZCAhPT0gJ29iamVjdCcgPyAnQU5EIHBvUHJvZHVjdHNWaWV3LmlkID0nICsgcHJvZHVjdElkIDogJyd9XG4gICAgICAgICAgICAgICAgJHtwcm9kdWN0SWQgJiYgdHlwZW9mIHByb2R1Y3RJZCA9PT0gJ29iamVjdCcgPyAnQU5EIHBvUHJvZHVjdHNWaWV3LmlkIElOICgnICsgKHByb2R1Y3RJZCB8fCBbXSkuam9pbignLCAnKSArICcpJyA6ICcnfVxuICAgICAgICAgICAgICAgICR7c3ViQ2F0ZWdvcnlJZCA/ICdBTkQgcG9Qcm9kdWN0c1ZpZXcuc3ViQ2F0ZWdvcnlJZCA9JyArIHN1YkNhdGVnb3J5SWQgOiAnJ31cbiAgICAgICAgICAgICAgICAke2NhdGVnb3J5SWQgPyAnIEFORCBwb1Byb2R1Y3RzVmlldy5jYXRlZ29yeUlkID0gJyArIGNhdGVnb3J5SWQgOiAnJyB9XG4gICAgICAgICAgKSBhcyBwb1Byb2R1Y3RzVmlld2BcblxuICAgIHJldHVybiBQcm9taXNlLmpvaW4oXG4gICAgICB0aGlzLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGdldFF1ZXJ5LCB7IHR5cGU6IHRoaXMuZ2V0U2VxdWVsaXplKCkuUXVlcnlUeXBlcy5TRUxFQ1QsIG5lc3Q6IGZhbHNlIH0pLFxuICAgICAgICB0aGlzLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGNvdW50UXVlcnksIHsgdHlwZTogdGhpcy5nZXRTZXF1ZWxpemUoKS5RdWVyeVR5cGVzLlNFTEVDVCB9KVxuICAgICkuc3ByZWFkKChmbGF0dGVuZWRQcm9kdWN0cywgY291bnREYXRhKSA9PiB7XG4gICAgICBjb25zdCBwcm9kdWN0cyA9IFV0aWxzLm9iamVjdGlmeShmbGF0dGVuZWRQcm9kdWN0cykubWFwKHByb2R1Y3QgPT4ge1xuICAgICAgICBwcm9kdWN0LnN1YkNhdGVnb3J5ID0gcHJvZHVjdC5zdWJDYXRlZ29yeVswXVxuICAgICAgICBwcm9kdWN0LnN1YkNhdGVnb3J5LmNhdGVnb3J5ID0gcHJvZHVjdC5zdWJDYXRlZ29yeS5jYXRlZ29yeVswXVxuICAgICAgICBwcm9kdWN0LnByaW1hcnlJbWFnZSA9IHByb2R1Y3QucHJpbWFyeUltYWdlWzBdXG4gICAgICAgIHJldHVybiBwcm9kdWN0XG4gICAgICB9KVxuICAgICAgY29uc3QgdG90YWxQcm9kdWN0cyA9IGNvdW50RGF0YVswXS5jb3VudFxuICAgICAgcmV0dXJuIHsgc3RhdHVzOiB0cnVlLCBkYXRhOiB7IHByb2R1Y3RzLCB0b3RhbFByb2R1Y3RzIH0gfVxuICAgIH0pXG4gIH1cblxuICBnZXRTaG9waWZpZWRWYXJpYW50cyAoc2hvcElkLCBwcm9kdWN0SWQpOiBQcm9taXNlPE5DUmVzcG9uc2U8U2hvcGlmaWVkVmFyaWFudFtdPj4ge1xuICAgIHJldHVybiB0aGlzLmdldFNlcXVlbGl6ZSgpLnF1ZXJ5KGBTRUxFQ1QgKiBGUk9NIHNob3BpZmllZFZhcmlhbnRzVmlldyBXSEVSRSBzaG9wSWQgPSAke3Nob3BJZH0gQU5EIHByb2R1Y3RJZCA9JHtwcm9kdWN0SWR9YCxcbiAgICAgIHsgdHlwZTogdGhpcy5nZXRTZXF1ZWxpemUoKS5RdWVyeVR5cGVzLlNFTEVDVCB9KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGE6IHJlc3VsdCB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiBmYWxzZSB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cblxuICBnZXRTaG9wU3RvY2sgKHNob3BJZCwgc2VhcmNoQ2xhdXNlID0ge30pIHtcbiAgICByZXR1cm4gKHRoaXMuZ2V0TW9kZWxzKCdTaG9wU3RvY2snKSBhcyBNb2RlbDxJbnN0YW5jZTxTaG9wU3RvY2s+LCBQYXJ0aWFsPFNob3BTdG9jaz4+KS5maW5kQWxsKHtcbiAgICAgIHdoZXJlOiBPYmplY3QuYXNzaWduKHt9LCBzZWFyY2hDbGF1c2UsIHsgc2hvcElkIH0pLFxuICAgICAgaW5jbHVkZTogW1xuICAgICAgICB7XG4gICAgICAgICAgbW9kZWw6IHRoaXMuZ2V0TW9kZWxzKCdWYXJpYW50JyksXG4gICAgICAgICAgaW5jbHVkZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtb2RlbDogdGhpcy5nZXRNb2RlbHMoJ1Byb2R1Y3QnKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgXVxuICAgIH0pLnRoZW4oZGF0YSA9PiB7XG4gICAgICByZXR1cm4geyBzdGF0dXM6IHRydWUsIGRhdGEgfVxuICAgIH0pXG4gIH1cblxuICAvLyBUbyBlYXNpbHkgZmlndXJlIG91dCB3aGljaCBwcm9kdWN0IGRvZXNuJ3QgaGF2ZSBzdXBwbGllcnNcbiAgZ2V0UHJvZHVjdHNXaXRoU3VwcGxpZXJzQ291bnQgKCkge1xuICAgIHJldHVybiBzdXBlci5yYXdSZWFkUXVlcnkoYFxuICAgICAgU0VMRUNUIHByb2R1Y3RzLmlkIGlkLCBwcm9kdWN0cy5uYW1lIG5hbWUsXG4gICAgICAgICAgICAgIHByb2R1Y3RzLnByaWNlIHByaWNlLCBNQVgodmFyaWFudHMuY3JlYXRlZEF0KSBjcmVhdGVkQXQsXG4gICAgICAgICAgICAgIE1BWCh2YXJpYW50cy51cGRhdGVkQXQpIHVwZGF0ZWRBdCwgQ09VTlQoc3VwcGxpZXJTdG9ja3MuaWQpIHN1cHBsaWVyc0NvdW50XG4gICAgICBGUk9NIHByb2R1Y3RzXG4gICAgICBJTk5FUiBKT0lOIHZhcmlhbnRzIE9OIHZhcmlhbnRzLnByb2R1Y3RJZCA9IHByb2R1Y3RzLmlkIEFORCB2YXJpYW50cy5kZWxldGVkQXQgSVMgTlVMTFxuICAgICAgTEVGVCBPVVRFUiBKT0lOIHN1cHBsaWVyU3RvY2tzIE9OIHN1cHBsaWVyU3RvY2tzLnZhcmlhbnRJZCA9IHZhcmlhbnRzLmlkIEFORCBzdXBwbGllclN0b2Nrcy5kZWxldGVkQXQgSVMgTlVMTFxuICAgICAgV0hFUkUgcHJvZHVjdHMuZGVsZXRlZEF0IElTIE5VTExcbiAgICAgIEdST1VQIEJZIHByb2R1Y3RzLmlkLCBwcm9kdWN0cy5uYW1lLCBwcm9kdWN0cy5wcmljZVxuICAgIGApXG4gIH1cblxuICBnZXRWYXJpYW50c1dpdGhTdXBwbGllckNvdW50IChwcm9kdWN0SWQ6IG51bWJlcikge1xuICAgIGlmICghcHJvZHVjdElkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoeyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAncHJvZHVjdElkIGlzIHJlcXVpcmVkIScgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1cGVyLnJhd1JlYWRRdWVyeShgXG4gICAgICAgIFNFTEVDVCB2YXJpYW50cy5wcm9kdWN0SWQgcHJvZHVjdElkLCB2YXJpYW50cy5pZCBpZCwgdmFyaWFudHMubmFtZSBuYW1lLFxuICAgICAgICAgICAgICAgTUFYKHZhcmlhbnRzLmNyZWF0ZWRBdCkgY3JlYXRlZEF0LFxuICAgICAgICAgICAgICAgTUFYKHZhcmlhbnRzLnVwZGF0ZWRBdCkgdXBkYXRlZEF0LCBDT1VOVChzdXBwbGllclN0b2Nrcy5pZCkgc3VwcGxpZXJzQ291bnRcbiAgICAgICAgRlJPTSB2YXJpYW50c1xuICAgICAgICBMRUZUIE9VVEVSIEpPSU4gc3VwcGxpZXJTdG9ja3MgT04gc3VwcGxpZXJTdG9ja3MudmFyaWFudElkID0gdmFyaWFudHMuaWQgQU5EIHN1cHBsaWVyU3RvY2tzLmRlbGV0ZWRBdCBJUyBOVUxMXG4gICAgICAgIFdIRVJFIHZhcmlhbnRzLmRlbGV0ZWRBdCBJUyBOVUxMIEFORCB2YXJpYW50cy5wcm9kdWN0SWQgPSAke3Byb2R1Y3RJZH1cbiAgICAgICAgR1JPVVAgQlkgdmFyaWFudHMucHJvZHVjdElkLCB2YXJpYW50cy5pZCwgdmFyaWFudHMubmFtZVxuICAgICAgYClcbiAgICB9XG4gIH1cblxuICBnZXRTdXBwbGllclN0b2NrIChzdXBwbGllcklkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5yYXdSZWFkUXVlcnkoYFxuICAgICAgU0VMRUNUICogRlJPTSBzdXBwbGllclN0b2Nrc1ZpZXdcbiAgICBgKVxuICB9XG5cbiAgYWRkU3VwcGxpZXJTdG9jayAoeyBzdXBwbGllcklkLCB2YXJpYW50SWQsIHByaWNlIH0pIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGU8U3VwcGxpZXJTdG9jaz4oJ1N1cHBsaWVyU3RvY2snLCB7XG4gICAgICBzdXBwbGllcklkLFxuICAgICAgdmFyaWFudElkLFxuICAgICAgcHJpY2VcbiAgICB9KVxuICB9XG5cbiAgLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgb2Ygc2hvcGlmaWVkUHJvZHVjdHNWaWV3IGluc3RlYWQgb2YgcHJvZHVjdCB0YWJsZVxuICBnZXRQcm9tb3Rpb24gKHNob3BJZCk6IFByb21pc2U8TkNSZXNwb25zZTxTaG9waWZpZWRQcm9tb3Rpb25bXT4+IHtcbiAgICByZXR1cm4gc3VwZXIucmF3UmVhZFF1ZXJ5KGBTRUxFQ1QgKiBGUk9NIHNob3BpZmllZFByb21vdGlvbnNWaWV3IFdIRVJFIHNob3BJZCA9ICR7c2hvcElkfWApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IFNob3BTZXJ2aWNlKClcbiJdfQ==
