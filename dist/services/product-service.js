"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const crud_service_1=require("./crud-service");class ProductService extends crud_service_1.CRUDService{getProductsWithPrimaryImage(){return super.getModels("Product").findAll({include:[{model:super.getModels("ProductImage"),where:{primary:!0}},{model:super.getModels("SubCategory"),include:[{model:super.getModels("Category")}]}]}).then(e=>({status:!0,data:e.map(e=>e.get({plain:!0}))}))}createCategory(e){return super.create("Category",e)}getCategory(e){return super.readOne("Category",{id:e})}getCategories(e={},t=!1){return t?this.getModels("Category").findAll({include:[{model:this.getModels("SubCategory")}],where:e}).then(e=>({status:!0,data:e.map(e=>e.get({plain:!0}))})):super.read("Category",e)}updateCategory(e,t){return super.update("Category",t,{id:e})}deleteCategory(e){return super.delete("Category",{id:e})}createSubCategory(e){return super.create("SubCategory",e)}getSubCategories(e){return super.read("SubCategory",e)}getSubCategory(e){return super.getModels("SubCategory").findOne({where:{id:e},include:[{model:super.getModels("Category")}]}).then(t=>t?{status:!0,data:t}:{status:!1,errMessage:`subCategoryId=${e} could not be found!`})}updateSubCategory(e,t){return super.update("SubCategory",t,{id:e})}deleteSubCategory(e){return super.delete("SubCategory",{id:e})}getProductImages(e){return this.getModels("ProductImage").findAll({where:{productId:e}}).then(e=>({status:!0,data:e}))}getProductImage(e){return super.read("ProductImage",{productId:e}).then(e=>{if(e.status){if(e.data&&e.data.length>0){return{status:!0,data:e.data.find(e=>!0===e.primary)||e.data[0]}}return{status:!1,errMessage:"Product has no image!"}}return{status:!1,errMessage:e.errMessage}})}getVariantImage(e){return this.readOne("Variant",{id:e}).then(e=>{if(e.status&&e.data){const t=e.data.productId;return this.getProductImage(t)}return{status:!1,errMessage:e.errMessage}})}}exports.default=new ProductService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
