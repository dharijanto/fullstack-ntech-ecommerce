"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),crud_service_1=require("./crud-service"),formatter_1=require("../libs/formatter"),crypto_1=require("../libs/crypto"),log=require("npmlog"),TAG="AccountService";class AccountService extends crud_service_1.CRUDService{getAccounts(e){return e?super.read("User",{shopId:e}):Promise.resolve({status:!1,errMessage:"shopId is required!"})}validateCredential(e,s,r=!1,t=!1){const a=s.username,u=s.password,i=s.confirmPassword,d=s.fullName,o=s.privilege;log.verbose(TAG,`validateCredential(): credential=${JSON.stringify(s,null,4)}`);const n=[];let l={};if(a?formatter_1.default.validateUsername(a)?l.username=a.toLowerCase():n.push("Username has to start with letter and of 5-16 characters long!"):n.push("Username is required!"),!r)if(u&&i)if(u!==i)n.push("Passwords do not match!");else if(u.length<4)n.push("Password has to be minimum 4 characters!");else{const e=crypto_1.default.genSaltedPass(u);l.saltedPass=e.passwordHash,l.salt=e.salt}else n.push("Password is required!");d?l.fullName=d:n.push("Full name is required!"),o?l.privilege=o:n.push("Privilege is required!"),e?l.shopId=e:n.push("shopId is required");const c=t?{id:s.id}:{username:a,shopId:e};return super.readOne("User",c).then(e=>(t&&!e.status?n.push("Account is not found!"):!t&&e.status&&n.push("Username is already taken!"),n.length?{status:!1,errMessage:n.join(", ")}:{status:!0,data:l}))}createAccount(e,s){return e?this.validateCredential(e,s,!1,!1).then(s=>{if(s.status){const r=Object.assign({},s.data,{shopId:e});return super.create("User",r)}return{status:!1,errMessage:s.errMessage}}):Promise.resolve({status:!1,errMessage:"shopId is required!"})}updateAccount(e,s,r){const t=!(r&&r.password&&r.password.length>0);return e&&s?this.validateCredential(e,r,t,!0).then(e=>e.status&&e.data?super.update("User",e.data,{id:s}):{status:!1,errMessage:e.errMessage}):Promise.resolve({status:!1,errMessage:"shopId and userId are required!"})}deleteAccount(e){return e?super.delete("User",{id:e}):Promise.resolve({status:!1,errMessage:"userId is required!"})}}exports.default=new AccountService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
