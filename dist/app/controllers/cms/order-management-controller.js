"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const base_controller_1=require("../base-controller"),order_service_1=require("../../../services/local-shop/order-service"),app_config_1=require("../../../app-config"),path=require("path");let log=require("npmlog");const TAG="OrderManagementController";class OrderManagementController extends base_controller_1.default{constructor(e){super(Object.assign(e,{viewPath:path.join(__dirname,"../../views")})),this.addInterceptor((e,r,t)=>{log.verbose(TAG,"req.path="+e.path),log.verbose(TAG,"loggedIn="+e.isAuthenticated()),log.verbose(TAG,"req.on="+JSON.stringify(e.session)),t()}),super.routeGet("/",(e,r,t)=>{r.redirect(`${e.baseUrl}/open-order-management`)}),super.routeGet("/open-order-management",(e,r,t)=>{r.render("cms/open-order-management")}),super.routeGet("/closed-order-management",(e,r,t)=>{r.render("cms/closed-order-management")}),super.routeGet("/open-orders",(e,r,t)=>{order_service_1.default.getOpenOrders().then(r.json.bind(r)).catch(t)}),super.routeGet("/closed-orders",(e,r,t)=>{order_service_1.default.getClosedOrders().then(r.json.bind(r)).catch(t)}),super.routePost("/order",(e,r,t)=>{order_service_1.default.addOrder(e.body).then(r.json.bind(r)).catch(t)}),super.routePost("/order/edit",(e,r,t)=>{order_service_1.default.editOrder(e.body).then(r.json.bind(r)).catch(t)}),super.routePost("/order/cancel",(e,r,t)=>{order_service_1.default.cancelOrder(e.body.id).then(r.json.bind(r)).catch(t)}),super.routePost("/order/close",(e,r,t)=>{const o=e.body.id;order_service_1.default.closeOrder(o).then(e=>e.status?order_service_1.default.printReceipt(`${app_config_1.default.BASE_URL}${this.getRouter().path()}/order/receipt?orderId=${o}&originalCopy=1`,1).then(e=>e.status&&e.data?void r.json({status:!0}):void r.json(e)):void r.json({status:!1,errMessage:e.errMessage}))}),super.routePost("/order/close-po",(e,r,t)=>{const o=e.body.id;order_service_1.default.finishPOOrder(o).then(e=>e.status?order_service_1.default.printReceipt(`${app_config_1.default.BASE_URL}${this.getRouter().path()}/order/receipt?orderId=${o}&originalCopy=1`,1).then(e=>e.status&&e.data?void r.json({status:!0}):void r.json(e)):void r.json({status:!1,errMessage:e.errMessage}))}),super.routePost("/order/print-receipt",(e,r,t)=>{const o=e.body.orderId;order_service_1.default.getReceipt(o).then(e=>e.status?order_service_1.default.printReceipt(`${app_config_1.default.BASE_URL}${this.getRouter().path()}/order/receipt?orderId=${o}`).then(e=>{e.status&&e.data?r.json({status:!0}):r.json(e)}):void r.json({status:!1,errMessage:e.errMessage})).catch(e=>{r.json({status:!1,errMessage:"Error: "+e.message})})}),super.routeGet("/order/receipt",(e,r,t)=>{const o=e.query.orderId,s=e.query.originalCopy;order_service_1.default.getReceipt(o).then(e=>{e.status&&e.data?(console.dir(e.data),r.locals.receipt=e.data,r.locals.originalCopy=s,r.render("cms/receipt")):r.status(500).send("Error: "+e.errMessage)}).catch(t)}),super.routeGet("/order-details",(e,r,t)=>{const o=e.query.orderId;o?order_service_1.default.getOrderDetails(o).then(r.json.bind(r)).catch(t):r.json({status:!1,errMessage:"orderId is required!"})}),super.routePost("/order-detail",(e,r,t)=>{const o=e.query.orderId,s=e.body.variantId,d=e.body.quantity;order_service_1.default.addOrderDetail(o,s,d).then(r.json.bind(r)).catch(t)}),super.routePost("/order-detail/edit",(e,r,t)=>{r.json({status:!1,errMessage:"Not implemented yet!"})}),super.routePost("/order-detail/delete",(e,r,t)=>{const o=e.body.id;order_service_1.default.deleteOrderDetail(o).then(r.json.bind(r)).catch(t)})}}exports.default=OrderManagementController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
