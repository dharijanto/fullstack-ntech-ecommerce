"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const base_controller_1=require("./base-controller"),cart_service_1=require("../local-shop-services/cart-service"),local_shop_service_1=require("../local-shop-services/local-shop-service"),path=require("path");let log=require("npmlog");const TAG="MainController";class CartController extends base_controller_1.default{constructor(e){super(Object.assign(e,{viewPath:path.join(__dirname,"../views")})),this.routePost("/add-item",(e,s,t)=>{if(log.verbose(TAG,"/add-item.POST:"+JSON.stringify(e.session,null,2)),e.body.variantId&&e.body.quantity){const t={variantId:e.body.variantId,quantity:parseInt(e.body.quantity,10)};local_shop_service_1.default.getVariantAvailability(e.body.variantId).then(r=>{r.status&&r.data?e.session&&cart_service_1.default.addItemToCart(r.data.status,e.session.cart,t).then(t=>{t.status?e.session?(e.session.cart=t.data,s.json({status:!0,data:t.data})):s.json({status:!1,errMessage:"Session is not defined!"}):s.json(t)}):s.json({status:!1,errMessage:"Failed to get variant availability: "+r.errMessage})})}else s.json({status:!1,errMessage:"variantId and quantity are required!"})}),this.routeGet("/details",(e,s,t)=>{s.json(e.session?e.session.cart:"Your cart is empty!")}),this.routePost("/place-order",(e,s,t)=>{e.session?cart_service_1.default.placeOrder(e.body.fullName,e.body.phoneNumber,e.body.notes,e.session.cart).then(t=>{t.status?e.session?cart_service_1.default.emptyCart(e.session.cart).then(e=>{e.status||log.error(TAG,"place-order.POST: emptyCart failed!"),s.json(t)}):s.json(t):s.json({status:!1,errMessage:t.errMessage})}).catch(t):s.json({status:!1,errMessage:"Session is not defined!"})}),this.routeGet("/order-placed",(e,s,t)=>{s.render("order-placed")}),this.routeGet("/",(e,s,t)=>{e.session?cart_service_1.default.getCart(e.session.cart).then(e=>{e.status?(s.locals.cart=e.data,s.render("cart")):t(new Error(e.errMessage))}):t(new Error("Session is not defined!"))})}}exports.default=CartController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAvY29udHJvbGxlcnMvY2FydC1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbImJhc2VfY29udHJvbGxlcl8xIiwicmVxdWlyZSIsImNhcnRfc2VydmljZV8xIiwibG9jYWxfc2hvcF9zZXJ2aWNlXzEiLCJwYXRoIiwibG9nIiwiVEFHIiwiQ2FydENvbnRyb2xsZXIiLCJkZWZhdWx0IiwiW29iamVjdCBPYmplY3RdIiwic2l0ZURhdGEiLCJzdXBlciIsIk9iamVjdCIsImFzc2lnbiIsInZpZXdQYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsInRoaXMiLCJyb3V0ZVBvc3QiLCJyZXEiLCJyZXMiLCJuZXh0IiwidmVyYm9zZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJzZXNzaW9uIiwiYm9keSIsInZhcmlhbnRJZCIsInF1YW50aXR5IiwiZGF0YSIsInBhcnNlSW50IiwiZ2V0VmFyaWFudEF2YWlsYWJpbGl0eSIsInRoZW4iLCJyZXNwIiwic3RhdHVzIiwiYWRkSXRlbVRvQ2FydCIsImNhcnQiLCJqc29uIiwiZXJyTWVzc2FnZSIsInJvdXRlR2V0IiwicGxhY2VPcmRlciIsImZ1bGxOYW1lIiwicGhvbmVOdW1iZXIiLCJub3RlcyIsImVtcHR5Q2FydCIsInJlc3AyIiwiZXJyb3IiLCJjYXRjaCIsInJlbmRlciIsImdldENhcnQiLCJsb2NhbHMiLCJFcnJvciIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJvRUFBQSxNQUFBQSxrQkFBQUMsUUFBQSxxQkFDQUMsZUFBQUQsUUFBQSx1Q0FFQUUscUJBQUFGLFFBQUEsNkNBRU1HLEtBQU9ILFFBQVEsUUFFckIsSUFBSUksSUFBTUosUUFBUSxVQUVsQixNQUFNSyxJQUFNLHVCQUVaQyx1QkFBNENQLGtCQUFBUSxRQUMxQ0MsWUFBYUMsR0FDWEMsTUFBTUMsT0FBT0MsT0FBT0gsR0FBWUksU0FBVVYsS0FBS1csS0FBS0MsVUFBVyxlQUcvREMsS0FBS0MsVUFBVSxZQUFhLENBQUNDLEVBQUtDLEVBQUtDLEtBRXJDLEdBREFoQixJQUFJaUIsUUFBUWhCLElBQUssa0JBQW9CaUIsS0FBS0MsVUFBVUwsRUFBSU0sUUFBUyxLQUFNLElBQ25FTixFQUFJTyxLQUFLQyxXQUFhUixFQUFJTyxLQUFLRSxTQUFVLENBQzNDLE1BQU1DLEdBQ0pGLFVBQVdSLEVBQUlPLEtBQUtDLFVBQ3BCQyxTQUFVRSxTQUFTWCxFQUFJTyxLQUFLRSxTQUFVLEtBRXhDekIscUJBQUFLLFFBQWlCdUIsdUJBQXVCWixFQUFJTyxLQUFLQyxXQUFXSyxLQUFLQyxJQUMzREEsRUFBS0MsUUFBVUQsRUFBS0osS0FDbEJWLEVBQUlNLFNBQ052QixlQUFBTSxRQUFZMkIsY0FBY0YsRUFBS0osS0FBS0ssT0FBUWYsRUFBSU0sUUFBUVcsS0FBTVAsR0FBTUcsS0FBS0MsSUFDbkVBLEVBQUtDLE9BQ0hmLEVBQUlNLFNBQ05OLEVBQUlNLFFBQVFXLEtBQU9ILEVBQUtKLEtBQ3hCVCxFQUFJaUIsTUFBT0gsUUFBUSxFQUFNTCxLQUFNSSxFQUFLSixRQUVwQ1QsRUFBSWlCLE1BQU9ILFFBQVEsRUFBT0ksV0FBWSw0QkFHeENsQixFQUFJaUIsS0FBS0osS0FLZmIsRUFBSWlCLE1BQU9ILFFBQVEsRUFBT0ksV0FBWSx1Q0FBeUNMLEVBQUtLLG9CQUl4RmxCLEVBQUlpQixNQUFPSCxRQUFRLEVBQU9JLFdBQVksMkNBSzFDckIsS0FBS3NCLFNBQVMsV0FBWSxDQUFDcEIsRUFBS0MsRUFBS0MsS0FDbkNELEVBQUlpQixLQUFLbEIsRUFBSU0sUUFBVU4sRUFBSU0sUUFBUVcsS0FBTyx5QkFHNUNuQixLQUFLQyxVQUFVLGVBQWdCLENBQUNDLEVBQUtDLEVBQUtDLEtBQ3BDRixFQUFJTSxRQUNOdkIsZUFBQU0sUUFBWWdDLFdBQVdyQixFQUFJTyxLQUFLZSxTQUFVdEIsRUFBSU8sS0FBS2dCLFlBQWF2QixFQUFJTyxLQUFLaUIsTUFBT3hCLEVBQUlNLFFBQVFXLE1BQU1KLEtBQUtDLElBQ2pHQSxFQUFLQyxPQUNIZixFQUFJTSxRQUNOdkIsZUFBQU0sUUFBWW9DLFVBQVV6QixFQUFJTSxRQUFRVyxNQUFNSixLQUFLYSxJQUN0Q0EsRUFBTVgsUUFDVDdCLElBQUl5QyxNQUFNeEMsSUFBSyx1Q0FFakJjLEVBQUlpQixLQUFLSixLQUdYYixFQUFJaUIsS0FBS0osR0FHWGIsRUFBSWlCLE1BQU9ILFFBQVEsRUFBT0ksV0FBWUwsRUFBS0ssZUFFNUNTLE1BQU0xQixHQUVURCxFQUFJaUIsTUFBT0gsUUFBUSxFQUFPSSxXQUFZLDhCQUkxQ3JCLEtBQUtzQixTQUFTLGdCQUFpQixDQUFDcEIsRUFBS0MsRUFBS0MsS0FDeENELEVBQUk0QixPQUFPLGtCQUdiL0IsS0FBS3NCLFNBQVMsSUFBSyxDQUFDcEIsRUFBS0MsRUFBS0MsS0FDeEJGLEVBQUlNLFFBQ052QixlQUFBTSxRQUFZeUMsUUFBUTlCLEVBQUlNLFFBQVFXLE1BQU1KLEtBQUtDLElBQ3JDQSxFQUFLQyxRQUNQZCxFQUFJOEIsT0FBT2QsS0FBT0gsRUFBS0osS0FDdkJULEVBQUk0QixPQUFPLFNBRVgzQixFQUFLLElBQUk4QixNQUFNbEIsRUFBS0ssZUFJeEJqQixFQUFLLElBQUk4QixNQUFNLCtCQWhGdkJDLFFBQUE1QyxRQUFBRCIsImZpbGUiOiJhcHAvY29udHJvbGxlcnMvY2FydC1jb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2VDb250cm9sbGVyIGZyb20gJy4vYmFzZS1jb250cm9sbGVyJ1xuaW1wb3J0IENhcnRTZXJ2aWNlIGZyb20gJy4uL2xvY2FsLXNob3Atc2VydmljZXMvY2FydC1zZXJ2aWNlJ1xuaW1wb3J0IHsgU2l0ZURhdGEgfSBmcm9tICcuLi8uLi9zaXRlLWRlZmluaXRpb25zJ1xuaW1wb3J0IExvY2FsU2hvcFNlcnZpY2UgZnJvbSAnLi4vbG9jYWwtc2hvcC1zZXJ2aWNlcy9sb2NhbC1zaG9wLXNlcnZpY2UnXG5cbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJylcblxubGV0IGxvZyA9IHJlcXVpcmUoJ25wbWxvZycpXG5cbmNvbnN0IFRBRyA9ICdNYWluQ29udHJvbGxlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FydENvbnRyb2xsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yIChzaXRlRGF0YTogU2l0ZURhdGEpIHtcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKHNpdGVEYXRhLCB7IHZpZXdQYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vdmlld3MnKSB9KSlcblxuICAgIC8vIFRPRE86IFRoaXMgc2hvdWxkIHRha2UgaW50byBhY2NvdW50IHRoZSBjYXNlIHdoZXJlIG51bWJlciB0aGluZyB0byBhZGQgPiBhdmFpbGFibGUgc3RvY2tzXG4gICAgdGhpcy5yb3V0ZVBvc3QoJy9hZGQtaXRlbScsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgbG9nLnZlcmJvc2UoVEFHLCAnL2FkZC1pdGVtLlBPU1Q6JyArIEpTT04uc3RyaW5naWZ5KHJlcS5zZXNzaW9uLCBudWxsLCAyKSlcbiAgICAgIGlmIChyZXEuYm9keS52YXJpYW50SWQgJiYgcmVxLmJvZHkucXVhbnRpdHkpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICB2YXJpYW50SWQ6IHJlcS5ib2R5LnZhcmlhbnRJZCxcbiAgICAgICAgICBxdWFudGl0eTogcGFyc2VJbnQocmVxLmJvZHkucXVhbnRpdHksIDEwKVxuICAgICAgICB9XG4gICAgICAgIExvY2FsU2hvcFNlcnZpY2UuZ2V0VmFyaWFudEF2YWlsYWJpbGl0eShyZXEuYm9keS52YXJpYW50SWQpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgaWYgKHJlc3Auc3RhdHVzICYmIHJlc3AuZGF0YSkge1xuICAgICAgICAgICAgaWYgKHJlcS5zZXNzaW9uKSB7XG4gICAgICAgICAgICAgIENhcnRTZXJ2aWNlLmFkZEl0ZW1Ub0NhcnQocmVzcC5kYXRhLnN0YXR1cywgcmVxLnNlc3Npb24uY2FydCwgZGF0YSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChyZXEuc2Vzc2lvbikge1xuICAgICAgICAgICAgICAgICAgICByZXEuc2Vzc2lvbi5jYXJ0ID0gcmVzcC5kYXRhXG4gICAgICAgICAgICAgICAgICAgIHJlcy5qc29uKHsgc3RhdHVzOiB0cnVlLCBkYXRhOiByZXNwLmRhdGEgfSlcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5qc29uKHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogJ1Nlc3Npb24gaXMgbm90IGRlZmluZWQhJyB9KVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXMuanNvbihyZXNwKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzLmpzb24oeyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAnRmFpbGVkIHRvIGdldCB2YXJpYW50IGF2YWlsYWJpbGl0eTogJyArIHJlc3AuZXJyTWVzc2FnZSB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5qc29uKHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogJ3ZhcmlhbnRJZCBhbmQgcXVhbnRpdHkgYXJlIHJlcXVpcmVkIScgfSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gVXNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzXG4gICAgdGhpcy5yb3V0ZUdldCgnL2RldGFpbHMnLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIHJlcy5qc29uKHJlcS5zZXNzaW9uID8gcmVxLnNlc3Npb24uY2FydCA6ICdZb3VyIGNhcnQgaXMgZW1wdHkhJylcbiAgICB9KVxuXG4gICAgdGhpcy5yb3V0ZVBvc3QoJy9wbGFjZS1vcmRlcicsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgaWYgKHJlcS5zZXNzaW9uKSB7XG4gICAgICAgIENhcnRTZXJ2aWNlLnBsYWNlT3JkZXIocmVxLmJvZHkuZnVsbE5hbWUsIHJlcS5ib2R5LnBob25lTnVtYmVyLCByZXEuYm9keS5ub3RlcywgcmVxLnNlc3Npb24uY2FydCkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICBpZiAocmVzcC5zdGF0dXMpIHtcbiAgICAgICAgICAgIGlmIChyZXEuc2Vzc2lvbikge1xuICAgICAgICAgICAgICBDYXJ0U2VydmljZS5lbXB0eUNhcnQocmVxLnNlc3Npb24uY2FydCkudGhlbihyZXNwMiA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNwMi5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihUQUcsICdwbGFjZS1vcmRlci5QT1NUOiBlbXB0eUNhcnQgZmFpbGVkIScpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcy5qc29uKHJlc3ApXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXMuanNvbihyZXNwKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMuanNvbih7IHN0YXR1czogZmFsc2UsIGVyck1lc3NhZ2U6IHJlc3AuZXJyTWVzc2FnZSB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2gobmV4dClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5qc29uKHsgc3RhdHVzOiBmYWxzZSwgZXJyTWVzc2FnZTogJ1Nlc3Npb24gaXMgbm90IGRlZmluZWQhJyB9KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlR2V0KCcvb3JkZXItcGxhY2VkJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICByZXMucmVuZGVyKCdvcmRlci1wbGFjZWQnKVxuICAgIH0pXG5cbiAgICB0aGlzLnJvdXRlR2V0KCcvJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICBpZiAocmVxLnNlc3Npb24pIHtcbiAgICAgICAgQ2FydFNlcnZpY2UuZ2V0Q2FydChyZXEuc2Vzc2lvbi5jYXJ0KS50aGVuKHJlc3AgPT4ge1xuICAgICAgICAgIGlmIChyZXNwLnN0YXR1cykge1xuICAgICAgICAgICAgcmVzLmxvY2Fscy5jYXJ0ID0gcmVzcC5kYXRhXG4gICAgICAgICAgICByZXMucmVuZGVyKCdjYXJ0JylcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV4dChuZXcgRXJyb3IocmVzcC5lcnJNZXNzYWdlKSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0KG5ldyBFcnJvcignU2Vzc2lvbiBpcyBub3QgZGVmaW5lZCEnKSlcbiAgICAgIH1cbiAgICB9KVxuXG4gIH1cbn1cbiJdfQ==
