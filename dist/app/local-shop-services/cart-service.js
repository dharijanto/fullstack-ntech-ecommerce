"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),Utils=require("../../libs/utils"),crud_service_1=require("../../services/crud-service"),local_shop_service_1=require("../local-shop-services/local-shop-service"),order_service_1=require("../local-shop-services/order-service"),product_service_1=require("../../services/product-service"),formatter_1=require("../../libs/formatter");class CartService extends crud_service_1.CRUDService{addItemToCart(e,r,t){let a;const s=(a=r||{readyStock:[],preOrder:[]})[e].find(e=>e.variantId===t.variantId),i=s?s.quantity+t.quantity:t.quantity;return local_shop_service_1.default.getVariantAvailability(t.variantId).then(r=>{if(r.status&&r.data){const t=r.data.quantity||0;return"readyStock"===r.data.status?"preOrder"===e?{status:!1,errMessage:"Product is ready stock!"}:i>t?{status:!1,errMessage:`Only ${t} items left!`}:{status:!0}:"preOrder"===r.data.status?"readyStock"===e?{status:!1,errMessage:"Product is not ready stock!"}:{status:!0}:{status:!1,errMessage:"Product is not available!"}}return{status:!1,errMessage:r.errMessage}}).then(r=>r.status?(s?(s.quantity=i,s.quantity<=0&&(a[e]=a[e].filter(e=>e.variantId!==s.variantId))):a[e].push(t),this.getCart(a)):r)}getCartItemDetail(e){return Promise.join(product_service_1.default.getVariantImage(e.variantId),local_shop_service_1.default.getVariantInformation(e.variantId)).spread((r,t)=>{if(t.status&&t.data)return{variantId:e.variantId,quantity:e.quantity,product:t.data.product,variant:t.data.variant,image:r.data&&Utils.getImageURL(r.data.imageFilename)};throw new Error("variantId="+e.variantId+" is not found!")})}placeOrder(e,r,t,a){if(void 0===a||0===a.preOrder.length&&0===a.readyStock.length)return Promise.resolve({status:!1,errMessage:"Cart is empty!"});if(e){const s=local_shop_service_1.default.getLocalShopId();return a.preOrder.length>0&&!formatter_1.default.validatePhoneNumber(r)?Promise.resolve({status:!1,errMessage:"Correct phone number is required for PO order!"}):super.create("Order",{fullName:e,phoneNumber:r,notes:t,shopId:s,status:"Open"}).then(e=>{if(e.status&&e.data){const r=e.data.id;return Promise.join(Promise.map(a.preOrder,e=>order_service_1.default.addPOOrderDetail(r,e.variantId,e.quantity)),Promise.map(a.readyStock,e=>order_service_1.default.addInStockOrderDetail(r,e.variantId,e.quantity))).spread((e,r)=>{return e.concat(r).reduce((e,r)=>({status:e.status&&r.status,errMessage:e.errMessage||r.errMessage}),{status:!0,errMessage:""})})}return console.log("here"),Promise.resolve({status:!1,errMessage:e.errMessage})})}return Promise.resolve({status:!1,errMessage:"fullName is required!"})}emptyCart(e){return e?(e.preOrder=[],e.readyStock=[],Promise.resolve({status:!0})):Promise.resolve({status:!1,errMessage:"currentCart is not defined!"})}getCart(e){return e?Promise.join(Promise.map(e.readyStock||[],e=>this.getCartItemDetail(e)),Promise.map(e.preOrder||[],e=>this.getCartItemDetail(e))).spread((e,r)=>{const t=e.concat(r).reduce((e,r)=>e+r.product.shopPrice*r.quantity,0);return{status:!0,data:{preOrder:r,readyStock:e,totalPrice:t}}}):Promise.resolve({status:!0,data:{readyStock:[],preOrder:[],totalPrice:0}})}}exports.default=new CartService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
