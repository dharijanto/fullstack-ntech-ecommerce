"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const Promise=require("bluebird"),moment=require("moment"),log=require("npmlog"),app_config_1=require("../../app-config"),crud_service_1=require("../../services/crud-service"),local_shop_service_1=require("./local-shop-service"),order_service_1=require("../../services/order-service"),print_service_1=require("../../services/print-service"),stock_service_1=require("./stock-service"),TAG="OrderService";class LocalOrderService extends crud_service_1.default{constructor(){super(),this.receiptPrinter=new print_service_1.default(app_config_1.default.RECEIPT_PRINTER.DEVICE_NAME,app_config_1.default.RECEIPT_PRINTER.PAPER_WIDTH)}getOrders(){return order_service_1.default.getOrders(local_shop_service_1.default.getLocalShopId())}getOpenOrders(){return this.getSequelize().query(`SELECT * FROM ordersView WHERE shopId = ${local_shop_service_1.default.getLocalShopId()} AND status != 'Close' AND status != 'Cancelled'`,{type:this.getSequelize().QueryTypes.SELECT}).then(e=>e?{status:!0,data:e}:{status:!1})}getClosedOrders(){return this.getSequelize().query(`SELECT * FROM ordersView WHERE shopId = ${local_shop_service_1.default.getLocalShopId()} AND status = 'Close' OR status = 'Cancelled'`,{type:this.getSequelize().QueryTypes.SELECT}).then(e=>e?{status:!0,data:e}:{status:!1})}getOrderDetails(e){return order_service_1.default.getOrderDetails(e)}getCustomerOrderDetails(e){return this.getSequelize().query(`SELECT * FROM customerOrderDetailsView WHERE orderId = ${e}`,{type:this.getSequelize().QueryTypes.SELECT}).then(e=>e?{status:!0,data:e}:{status:!1})}addOrder(e){return super.create("Order",Object.assign(e,{status:"Open",shopId:local_shop_service_1.default.getLocalShopId()}))}editOrder(e){const t={fullName:e.fullName,phoneNumber:e.phoneNumber,notes:e.notes};return e.id?super.readOne("Order",{id:e.id}).then(r=>r.status&&r.data?"Open"!==r.data.status?{status:!1,errMessage:"Only open order can be editted!"}:e.fullName?super.update("Order",t,{id:e.id}):Promise.resolve({status:!1,errMssage:"fullName is required!"}):{status:!1,errMessage:"Order is not found!"}):Promise.resolve({status:!1,errMessage:"Order is required!"})}cancelOrder(e){return super.readOne("Order",{id:e}).then(t=>t.status&&t.data?"Open"!==t.data.status?{status:!1,errMessage:"Only open order can be cancelled!"}:super.update("Order",{status:"Cancelled"},{id:e}):{status:!1,errMessage:"Order is not found!"})}closeOrder(e){return super.readOne("Order",{id:e}).then(t=>t.status&&t.data?"Open"===t.data.status?super.read("OrderDetail",{orderId:e}).then(t=>{if(t.status){if(t.data){const r=t.data;let s=!1;return r.forEach(e=>{"PO"===e.status&&(s=!0)}),super.update("Order",{status:s?"PO":"Close"},{id:e})}return{status:!1,errMessage:"Order is empty!"}}return{status:!1,errMessage:t.errMessage}}):(console.log("status="+JSON.stringify(t.data)),{status:!1,errMessage:"Only open order can be closed!"}):{status:!1,errMessage:"Order is not found!"})}finishPOOrder(e){return super.readOne("Order",{id:e}).then(t=>{if(t.status&&t.data){return"PO"===t.data.status?super.update("Order",{status:"Close"},{id:e}):{status:!1,errMessage:"Only PO order can be finished!"}}return{status:!1,errMessage:"Order is not found!"}})}isOpenOrder(e){return super.readOne("Order",{id:e}).then(e=>e.status&&e.data?"Open"===e.data.status?{status:!0}:{status:!1,errMessage:"Order is not of 'Open' status!"}:{status:!1,errMessage:"Order not found!"})}addPOOrderDetail(e,t,r){return local_shop_service_1.default.getVariantPrice(t).then(s=>{if(s.status&&s.data){const a=s.data;return super.getModels("OrderDetail").bulkCreate([{variantId:t,orderId:e,status:"PO",quantity:r,price:a}]).then(e=>({status:!0,data:e}))}return{status:!1,errMessage:"Failed to get variant price: "+s.errMessage}})}addInStockOrderDetail(e,t,r){return log.verbose(TAG,`addOrderDetailWithStatus(): orderId=${e} variantId=${t}`),local_shop_service_1.default.getVariantPrice(t).then(s=>{if(s.status&&s.data){const a=s.data;return stock_service_1.default.getStocksGroupedByAisle(t).then(s=>{if(s.status&&s.data){const d=s.data;let u=r;const i=[];for(let r=0;r<d.length;r++){const s=d[r];if(u<=s.quantity){i.push({orderId:e,status:"Ready",variantId:t,quantity:u,price:a,aisle:s.aisle}),u=0;break}i.push({orderId:e,status:"Ready",variantId:t,quantity:s.quantity,price:a,aisle:s.aisle}),u-=s.quantity}return u>0?{status:!1,errMessage:"No enough quantity available!"}:super.getModels("OrderDetail").bulkCreate(i).then(e=>e.length?{status:!0,data:e}:{status:!1,errMessage:"Failed to create order details!"})}return{status:!1,errMessage:"shopStocks not found!"}})}throw new Error(`variantId=${t} is not found!`)})}addOrderDetail(e,t,r){return r<=0?Promise.resolve({status:!1,errMessage:"Quantity needs to be a positive number!"}):this.isOpenOrder(e).then(s=>s.status?local_shop_service_1.default.getVariantAvailability(t).then(s=>{if(s.status&&s.data){const a=s.data;return log.verbose(TAG,`addOrderDetail(): quantity=${r} availability.quantity=${a.quantity}`),"readyStock"===a.status&&r>(a.quantity||0)?{status:!1,errMessage:`Only ${a.quantity} ready stock(s) left!`}:"preOrder"===a.status?this.addPOOrderDetail(e,t,r):this.addInStockOrderDetail(e,t,r)}return{status:!1,errMessage:"Failed to get variant information: "+s.errMessage}}):{status:!1,errMessage:s.errMessage})}editOrderDetail(e,t,r){}deleteOrderDetail(e){return e?super.readOne("OrderDetail",{id:e}).then(t=>{if(t.status&&t.data){const r=t.data.orderId;return this.isOpenOrder(r).then(t=>t.status?super.delete("OrderDetail",{id:e}):{status:!1,errMessage:t.errMessage})}return{status:!1,errMessage:t.errMessage}}):Promise.resolve({status:!1,errMessage:"orderDetailId is reuqired!"})}printReceipt(e,t=1){return Promise.resolve(this.receiptPrinter.printURL(e,t).then(e=>e.status?{status:!0}:{status:!1,errMessage:e.errMessage}))}getReceipt(e){return e?order_service_1.default.getOrder(e).then(t=>{if(t.status&&t.data){const r=t.data;if("Close"===r.status||"PO"===r.status){let s={orderId:r.id,fullName:r.fullName,phoneNumber:r.phoneNumber,status:r.status,totalPrice:r.price,poDuration:void 0,orderDate:moment(t.data.updatedAt).format("DD-MM-YY HH:mm"),printDate:moment().format("DD-MM-YY HH:mm"),items:[]};return this.getCustomerOrderDetails(e).then(e=>e.status&&e.data?(e.data.forEach(e=>{s.items.push({name:e.productName,status:e.status,variant:e.variantName,price:e.price,quantity:e.quantity}),"PO"===e.status&&(s.poDuration?s.poDuration=Math.max(s.poDuration,e.preOrderDuration):s.poDuration=e.preOrderDuration)}),{status:!0,data:s}):{status:!1,errMessage:"Order is empty!"})}return{status:!1,errMessage:"Only closed or PO order can be printed!"}}return{status:!1,errMessage:"Order is not found!"}}):Promise.resolve({status:!1,errMessage:"orderId is required!"})}}exports.default=new LocalOrderService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
