"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const crud_service_1=require("../../services/crud-service"),shop_service_1=require("../../services/shop-service"),Promise=require("bluebird"),app_config_1=require("../../app-config"),Utils=require("../../libs/utils"),a={status:!1,errMessage:""};class LocalShopService extends crud_service_1.CRUDService{constructor(){super(...arguments),this.localShopId=-1}initialize(){return app_config_1.default.LOCAL_SHOP_INFORMATION&&app_config_1.default.LOCAL_SHOP_INFORMATION.NAME?-1===this.localShopId?super.readOne("Shop",{name:app_config_1.default.LOCAL_SHOP_INFORMATION.NAME}).then(e=>e.status&&e.data?(this.localShopId=e.data.id,{status:!0,data:null}):{status:!1,errMessage:"Shop name is not found!"}):Promise.resolve({status:!0,data:null}):Promise.resolve({status:!1,errMessage:"Local Shop Information is not defined!"})}getLocalShopId(){if(-1!==this.localShopId)return this.localShopId;throw new Error("Local shop id is not yet retrieved!")}getShopifiedProducts(){return shop_service_1.default.getShopifiedProducts(this.getLocalShopId())}getInStockProducts({pageSize:e=10,pageIndex:t=0,productId:r=null,categoryId:s=null,subCategoryId:o=null}){return shop_service_1.default.getInStockProducts({pageSize:e,pageIndex:t,productId:r,categoryId:s,subCategoryId:o},this.localShopId)}getInStockProduct(e){return this.getInStockProducts({productId:e,pageSize:1,pageIndex:0}).then(e=>e.status&&e.data?e.data&&e.data.products.length>0?{status:!0,data:e.data.products[0]}:{status:!1,errMessage:"Product not found!"}:{status:!1,errMessage:e.errMessage})}getPOProducts({pageSize:e=10,pageIndex:t=0,productId:r=null,categoryId:s=null,subCategoryId:o=null}){return shop_service_1.default.getPOProducts({pageSize:e,pageIndex:t,productId:r,categoryId:s,subCategoryId:o},this.localShopId)}getPOProduct(e){return this.getPOProducts({pageSize:1,pageIndex:0,productId:e}).then(e=>e.status&&e.data?e.data.products.length?{status:!0,data:e.data.products[0]}:{status:!1,errMessage:"Product not found!"}:{status:!1,errMessage:e.errMessage})}getProductsByCategories(){const e=[];let t;function r(r,s){if(!s.subCategory||!s.subCategory.category)throw new Error("Product does not have category or subCategory defined!");const o=s.subCategory.name,a=function(t,r){const s=function(t){let r=e.find(e=>e.name===t);return r||(r={name:t,subCategories:[]},e.push(r)),r}(t).subCategories;let o=s.find(e=>e.name===r);return o||(o={name:r,poProducts:[],inStockProducts:[]},s.push(o)),o}(s.subCategory.category.name,o);r?a.inStockProducts.push(s):a.poProducts.push(s),t=t?s.updatedAt>t?s.updatedAt:t:s.updatedAt}return Promise.join(this.getInStockProducts({}),this.getPOProducts({})).spread((s,o)=>s.status&&s.data&&o.status&&o.data?(s.data.forEach(e=>{r(!0,e)}),o.data.forEach(e=>{r(!1,e)}),{status:!0,data:{categories:e,lastUpdated:t}}):{status:!1,errMessage:s.errMessage||o.errMessage})}getShopifiedVariants(e){return shop_service_1.default.getShopifiedVariants(this.localShopId,e)}updateProduct(e,t){const{price:r,preOrderAllowed:s,preOrderDuration:o,disabled:a}=t;return this.getModels("ShopProduct").findOne({where:{shopId:this.localShopId,productId:e}}).then(t=>({id:t&&t.id,productId:e,shopId:this.localShopId,price:r,preOrderAllowed:s,preOrderDuration:o,disabled:a})).then(e=>this.getModels("ShopProduct").upsert(e).then(e=>({status:!0})))}getVariantInformation(e){return this.readOne("Variant",{id:e}).then(t=>{if(t.status&&t.data){const r=t.data.productId;return Promise.join(super.getSequelize().query(`SELECT * FROM shopifiedVariantsView WHERE id = ${e} AND shopId=${this.localShopId}`,{type:super.getSequelize().QueryTypes.SELECT}),super.getSequelize().query(`SELECT * FROM shopifiedProductsView WHERE id = ${r} AND shopId=${this.localShopId}`,{type:super.getSequelize().QueryTypes.SELECT})).spread((t,s)=>{if(t&&s){return{status:!0,data:{variant:Utils.objectify(t)[0],product:Utils.objectify(s)[0]}}}return t?{status:!1,errMessage:`productId=${r} is not found!`}:{status:!1,errMessage:`variantId=${e} is not found!`}})}return{status:!1,errMessage:"variantId="+e+" is not found!"}})}getVariantPrice(e){return this.readOne("Variant",{id:e}).then(t=>{if(t.status&&t.data){const e=t.data.productId;return super.getSequelize().query(`SELECT shopPrice FROM shopifiedProductsView WHERE id = ${e} AND shopId = ${this.getLocalShopId()}`,{type:super.getSequelize().QueryTypes.SELECT}).then(t=>{if(t&&t.length>0){return{status:!0,data:t[0].shopPrice}}return{status:!1,errMessage:"productId="+e+" is not found!"}})}return{status:!1,errMessage:"variantId="+e+" is not found!"}})}getVariantAvailability(e){return this.rawReadOneQuery(`\n    SELECT * FROM shopifiedVariantsView WHERE id = ${e} AND shopId = ${this.getLocalShopId()}\n    `).then(e=>{if(e.status&&e.data){return{status:!0,data:{status:e.data.stockQuantity>0?"readyStock":"preOrder",quantity:e.data.stockQuantity}}}return{status:!1,errMessage:e.errMessage}})}getPromotions(){return shop_service_1.default.getPromotion(this.getLocalShopId())}createPromotion(e,t){return e?super.create("Promotion",Object.assign({shopId:this.getLocalShopId(),productId:e},t)):Promise.resolve({status:!1,errMessage:"productId is required!"})}updatePromotion(e,t,r){return r.id?super.update("Promotion",Object.assign({shopId:this.getLocalShopId(),productId:e},r),{id:t}):Promise.resolve({status:!1,errMessage:"promotionId is required!"})}deletePromotion(e){return e?super.delete("Promotion",{id:e}):Promise.resolve({status:!1,errMessage:"promoitonId is required!"})}}exports.default=new LocalShopService;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
