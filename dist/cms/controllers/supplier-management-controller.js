"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const base_controller_1=require("./base-controller"),shop_service_1=require("../../services/shop-service");let log=require("npmlog");const TAG="ProductManagementController";class SupplierManagementController extends base_controller_1.default{constructor(e){super(e,!1),super.routeGet("/",(e,t,r)=>{t.render("supplier-management")}),super.routeGet("/suppliers",(e,t,r)=>{shop_service_1.default.read("Supplier",{}).then(t.json.bind(t)).catch(r)}),super.routePost("/supplier",(e,t,r)=>{shop_service_1.default.create("Supplier",e.body).then(t.json.bind(t)).catch(r)}),super.routePost("/supplier/edit",(e,t,r)=>{shop_service_1.default.update("Supplier",e.body,{id:e.body.id}).then(t.json.bind(t)).catch(r)}),super.routePost("/supplier/delete",(e,t,r)=>{shop_service_1.default.delete("Supplier",{id:e.body.id}).then(t.json.bind(t)).catch(r)}),super.routeGet("/products",(e,t,r)=>{shop_service_1.default.getProductsWithSuppliersCount().then(t.json.bind(t)).catch(r)}),super.routeGet("/variants",(e,t,r)=>{const s=e.query.productId;shop_service_1.default.getVariantsWithSupplierCount(s).then(t.json.bind(t)).catch(r)}),super.routeGet("/supplier-stocks",(e,t,r)=>{const s=e.query.supplierId;s?shop_service_1.default.getSupplierStock(s).then(e=>{t.json(e)}).catch(r):t.send({status:!1,errMessage:"supplierId is required"})}),super.routePost("/supplier-stock",(e,t,r)=>{const s=e.query.variantId,o=e.query.supplierId;s&&o?shop_service_1.default.addSupplierStock(Object.assign({supplierId:o,variantId:s},e.body)).then(t.json.bind(t)).catch(r):t.json({status:!1,errMessage:"variantId and supplierId are requried"})}),super.routePost("/supplier-stock/edit",(e,t,r)=>{shop_service_1.default.update("SupplierStock",e.body,{id:e.body.id}).then(e=>{t.json(e)}).catch(r)}),super.routePost("/supplier-stock/delete",(e,t,r)=>{shop_service_1.default.delete("SupplierStock",{id:e.body.id}).then(e=>{t.json(e)}).catch(r)})}}exports.default=SupplierManagementController;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jbXMvY29udHJvbGxlcnMvc3VwcGxpZXItbWFuYWdlbWVudC1jb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbImJhc2VfY29udHJvbGxlcl8xIiwicmVxdWlyZSIsInNob3Bfc2VydmljZV8xIiwibG9nIiwiVEFHIiwiU3VwcGxpZXJNYW5hZ2VtZW50Q29udHJvbGxlciIsImRlZmF1bHQiLCJbb2JqZWN0IE9iamVjdF0iLCJpbml0RGF0YSIsInN1cGVyIiwicm91dGVHZXQiLCJyZXEiLCJyZXMiLCJuZXh0IiwicmVuZGVyIiwicmVhZCIsInRoZW4iLCJqc29uIiwiYmluZCIsImNhdGNoIiwicm91dGVQb3N0IiwiY3JlYXRlIiwiYm9keSIsInVwZGF0ZSIsImlkIiwiZGVsZXRlIiwiZ2V0UHJvZHVjdHNXaXRoU3VwcGxpZXJzQ291bnQiLCJwcm9kdWN0SWQiLCJxdWVyeSIsImdldFZhcmlhbnRzV2l0aFN1cHBsaWVyQ291bnQiLCJzdXBwbGllcklkIiwiZ2V0U3VwcGxpZXJTdG9jayIsInJlc3AiLCJzZW5kIiwic3RhdHVzIiwiZXJyTWVzc2FnZSIsInZhcmlhbnRJZCIsImFkZFN1cHBsaWVyU3RvY2siLCJPYmplY3QiLCJhc3NpZ24iLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoib0VBQ0EsTUFBQUEsa0JBQUFDLFFBQUEscUJBS0FDLGVBQUFELFFBQUEsK0JBRUEsSUFBSUUsSUFBTUYsUUFBUSxVQUVsQixNQUFNRyxJQUFNLG9DQUNaQyxxQ0FBMERMLGtCQUFBTSxRQUN4REMsWUFBYUMsR0FDWEMsTUFBTUQsR0FBVSxHQUNoQkMsTUFBTUMsU0FBUyxJQUFLLENBQUNDLEVBQUtDLEVBQUtDLEtBQzdCRCxFQUFJRSxPQUFPLHlCQUdiTCxNQUFNQyxTQUFTLGFBQWMsQ0FBQ0MsRUFBS0MsRUFBS0MsS0FDdENYLGVBQUFJLFFBQVlTLEtBQWUsZUFBZ0JDLEtBQUtKLEVBQUlLLEtBQUtDLEtBQUtOLElBQU1PLE1BQU1OLEtBRzVFSixNQUFNVyxVQUFVLFlBQWEsQ0FBQ1QsRUFBS0MsRUFBS0MsS0FDdENYLGVBQUFJLFFBQVllLE9BQWlCLFdBQVlWLEVBQUlXLE1BQU1OLEtBQUtKLEVBQUlLLEtBQUtDLEtBQUtOLElBQU1PLE1BQU1OLEtBR3BGSixNQUFNVyxVQUFVLGlCQUFrQixDQUFDVCxFQUFLQyxFQUFLQyxLQUMzQ1gsZUFBQUksUUFBWWlCLE9BQWlCLFdBQVlaLEVBQUlXLE1BQVFFLEdBQUliLEVBQUlXLEtBQUtFLEtBQU1SLEtBQUtKLEVBQUlLLEtBQUtDLEtBQUtOLElBQU1PLE1BQU1OLEtBR3pHSixNQUFNVyxVQUFVLG1CQUFvQixDQUFDVCxFQUFLQyxFQUFLQyxLQUM3Q1gsZUFBQUksUUFBWW1CLE9BQWlCLFlBQWNELEdBQUliLEVBQUlXLEtBQUtFLEtBQU1SLEtBQUtKLEVBQUlLLEtBQUtDLEtBQUtOLElBQU1PLE1BQU1OLEtBRy9GSixNQUFNQyxTQUFTLFlBQWEsQ0FBQ0MsRUFBS0MsRUFBS0MsS0FDckNYLGVBQUFJLFFBQVlvQixnQ0FBZ0NWLEtBQUtKLEVBQUlLLEtBQUtDLEtBQUtOLElBQU1PLE1BQU1OLEtBRzdFSixNQUFNQyxTQUFTLFlBQWEsQ0FBQ0MsRUFBS0MsRUFBS0MsS0FDckMsTUFBTWMsRUFBWWhCLEVBQUlpQixNQUFNRCxVQUM1QnpCLGVBQUFJLFFBQVl1Qiw2QkFBNkJGLEdBQVdYLEtBQUtKLEVBQUlLLEtBQUtDLEtBQUtOLElBQU1PLE1BQU1OLEtBR3JGSixNQUFNQyxTQUFTLG1CQUFvQixDQUFDQyxFQUFLQyxFQUFLQyxLQUM1QyxNQUFNaUIsRUFBYW5CLEVBQUlpQixNQUFNRSxXQUN4QkEsRUFHSDVCLGVBQUFJLFFBQVl5QixpQkFBaUJELEdBQVlkLEtBQUtnQixJQUM1Q3BCLEVBQUlLLEtBQUtlLEtBQ1JiLE1BQU1OLEdBSlRELEVBQUlxQixNQUFPQyxRQUFRLEVBQU9DLFdBQVksNkJBUTFDMUIsTUFBTVcsVUFBVSxrQkFBbUIsQ0FBQ1QsRUFBS0MsRUFBS0MsS0FDNUMsTUFBTXVCLEVBQVl6QixFQUFJaUIsTUFBTVEsVUFDdEJOLEVBQWFuQixFQUFJaUIsTUFBTUUsV0FDeEJNLEdBQWNOLEVBR2pCNUIsZUFBQUksUUFBWStCLGlCQUFpQkMsT0FBT0MsUUFBU1QsV0FBQUEsRUFBWU0sVUFBQUEsR0FBYXpCLEVBQUlXLE9BQU9OLEtBQUtKLEVBQUlLLEtBQUtDLEtBQUtOLElBQU1PLE1BQU1OLEdBRmhIRCxFQUFJSyxNQUFPaUIsUUFBUSxFQUFPQyxXQUFZLDRDQU0xQzFCLE1BQU1XLFVBQVUsdUJBQXdCLENBQUNULEVBQUtDLEVBQUtDLEtBQ2pEWCxlQUFBSSxRQUFZaUIsT0FBc0IsZ0JBQWlCWixFQUFJVyxNQUFRRSxHQUFJYixFQUFJVyxLQUFLRSxLQUFNUixLQUFLZ0IsSUFDckZwQixFQUFJSyxLQUFLZSxLQUNSYixNQUFNTixLQUdYSixNQUFNVyxVQUFVLHlCQUEwQixDQUFDVCxFQUFLQyxFQUFLQyxLQUNuRFgsZUFBQUksUUFBWW1CLE9BQXNCLGlCQUFtQkQsR0FBS2IsRUFBSVcsS0FBS0UsS0FBTVIsS0FBS2dCLElBQzVFcEIsRUFBSUssS0FBS2UsS0FDUmIsTUFBTU4sTUE5RGYyQixRQUFBbEMsUUFBQUQiLCJmaWxlIjoiY21zL2NvbnRyb2xsZXJzL3N1cHBsaWVyLW1hbmFnZW1lbnQtY29udHJvbGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCdcbmltcG9ydCBCYXNlQ29udHJvbGxlciBmcm9tICcuL2Jhc2UtY29udHJvbGxlcidcbmltcG9ydCBQcm9kdWN0U2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wcm9kdWN0LXNlcnZpY2UnXG5pbXBvcnQgeyBJbWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaXRlLWRlZmluaXRpb25zJ1xuXG5pbXBvcnQgQXBwQ29uZmlnIGZyb20gJy4uLy4uL2FwcC1jb25maWcnXG5pbXBvcnQgU2hvcFNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvc2hvcC1zZXJ2aWNlJ1xuXG5sZXQgbG9nID0gcmVxdWlyZSgnbnBtbG9nJylcblxuY29uc3QgVEFHID0gJ1Byb2R1Y3RNYW5hZ2VtZW50Q29udHJvbGxlcidcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1cHBsaWVyTWFuYWdlbWVudENvbnRyb2xsZXIgZXh0ZW5kcyBCYXNlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yIChpbml0RGF0YSkge1xuICAgIHN1cGVyKGluaXREYXRhLCBmYWxzZSlcbiAgICBzdXBlci5yb3V0ZUdldCgnLycsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgcmVzLnJlbmRlcignc3VwcGxpZXItbWFuYWdlbWVudCcpXG4gICAgfSlcblxuICAgIHN1cGVyLnJvdXRlR2V0KCcvc3VwcGxpZXJzJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICBTaG9wU2VydmljZS5yZWFkPFN1cHBsaWVyPignU3VwcGxpZXInLCB7fSkudGhlbihyZXMuanNvbi5iaW5kKHJlcykpLmNhdGNoKG5leHQpXG4gICAgfSlcblxuICAgIHN1cGVyLnJvdXRlUG9zdCgnL3N1cHBsaWVyJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICBTaG9wU2VydmljZS5jcmVhdGU8U3VwcGxpZXI+KCdTdXBwbGllcicsIHJlcS5ib2R5KS50aGVuKHJlcy5qc29uLmJpbmQocmVzKSkuY2F0Y2gobmV4dClcbiAgICB9KVxuXG4gICAgc3VwZXIucm91dGVQb3N0KCcvc3VwcGxpZXIvZWRpdCcsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgU2hvcFNlcnZpY2UudXBkYXRlPFN1cHBsaWVyPignU3VwcGxpZXInLCByZXEuYm9keSwgeyBpZDogcmVxLmJvZHkuaWQgfSkudGhlbihyZXMuanNvbi5iaW5kKHJlcykpLmNhdGNoKG5leHQpXG4gICAgfSlcblxuICAgIHN1cGVyLnJvdXRlUG9zdCgnL3N1cHBsaWVyL2RlbGV0ZScsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgU2hvcFNlcnZpY2UuZGVsZXRlPFN1cHBsaWVyPignU3VwcGxpZXInLCB7IGlkOiByZXEuYm9keS5pZCB9KS50aGVuKHJlcy5qc29uLmJpbmQocmVzKSkuY2F0Y2gobmV4dClcbiAgICB9KVxuXG4gICAgc3VwZXIucm91dGVHZXQoJy9wcm9kdWN0cycsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgU2hvcFNlcnZpY2UuZ2V0UHJvZHVjdHNXaXRoU3VwcGxpZXJzQ291bnQoKS50aGVuKHJlcy5qc29uLmJpbmQocmVzKSkuY2F0Y2gobmV4dClcbiAgICB9KVxuXG4gICAgc3VwZXIucm91dGVHZXQoJy92YXJpYW50cycsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgY29uc3QgcHJvZHVjdElkID0gcmVxLnF1ZXJ5LnByb2R1Y3RJZFxuICAgICAgU2hvcFNlcnZpY2UuZ2V0VmFyaWFudHNXaXRoU3VwcGxpZXJDb3VudChwcm9kdWN0SWQpLnRoZW4ocmVzLmpzb24uYmluZChyZXMpKS5jYXRjaChuZXh0KVxuICAgIH0pXG5cbiAgICBzdXBlci5yb3V0ZUdldCgnL3N1cHBsaWVyLXN0b2NrcycsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgY29uc3Qgc3VwcGxpZXJJZCA9IHJlcS5xdWVyeS5zdXBwbGllcklkXG4gICAgICBpZiAoIXN1cHBsaWVySWQpIHtcbiAgICAgICAgcmVzLnNlbmQoeyBzdGF0dXM6IGZhbHNlLCBlcnJNZXNzYWdlOiAnc3VwcGxpZXJJZCBpcyByZXF1aXJlZCcgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIFNob3BTZXJ2aWNlLmdldFN1cHBsaWVyU3RvY2soc3VwcGxpZXJJZCkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICByZXMuanNvbihyZXNwKVxuICAgICAgICB9KS5jYXRjaChuZXh0KVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBzdXBlci5yb3V0ZVBvc3QoJy9zdXBwbGllci1zdG9jaycsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgICAgY29uc3QgdmFyaWFudElkID0gcmVxLnF1ZXJ5LnZhcmlhbnRJZFxuICAgICAgY29uc3Qgc3VwcGxpZXJJZCA9IHJlcS5xdWVyeS5zdXBwbGllcklkXG4gICAgICBpZiAoIXZhcmlhbnRJZCB8fCAhc3VwcGxpZXJJZCkge1xuICAgICAgICByZXMuanNvbih7IHN0YXR1czogZmFsc2UsIGVyck1lc3NhZ2U6ICd2YXJpYW50SWQgYW5kIHN1cHBsaWVySWQgYXJlIHJlcXVyaWVkJyB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgU2hvcFNlcnZpY2UuYWRkU3VwcGxpZXJTdG9jayhPYmplY3QuYXNzaWduKHsgc3VwcGxpZXJJZCwgdmFyaWFudElkIH0sIHJlcS5ib2R5KSkudGhlbihyZXMuanNvbi5iaW5kKHJlcykpLmNhdGNoKG5leHQpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHN1cGVyLnJvdXRlUG9zdCgnL3N1cHBsaWVyLXN0b2NrL2VkaXQnLCAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICAgIFNob3BTZXJ2aWNlLnVwZGF0ZTxTdXBwbGllclN0b2NrPignU3VwcGxpZXJTdG9jaycsIHJlcS5ib2R5LCB7IGlkOiByZXEuYm9keS5pZCB9KS50aGVuKHJlc3AgPT4ge1xuICAgICAgICByZXMuanNvbihyZXNwKVxuICAgICAgfSkuY2F0Y2gobmV4dClcbiAgICB9KVxuXG4gICAgc3VwZXIucm91dGVQb3N0KCcvc3VwcGxpZXItc3RvY2svZGVsZXRlJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICBTaG9wU2VydmljZS5kZWxldGU8U3VwcGxpZXJTdG9jaz4oJ1N1cHBsaWVyU3RvY2snLCB7IGlkIDogcmVxLmJvZHkuaWQgfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgcmVzLmpzb24ocmVzcClcbiAgICAgIH0pLmNhdGNoKG5leHQpXG4gICAgfSlcbiAgfVxufVxuIl19
